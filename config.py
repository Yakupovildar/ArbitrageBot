import os
import random
from dataclasses import dataclass, field
from typing import List, Dict, Optional
from datetime import datetime, time, timezone, timedelta

@dataclass
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    
    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    MOEX_API_BASE_URL: str = "https://iss.moex.com/iss"
    REQUEST_TIMEOUT: int = 30
    RATE_LIMIT_DELAY: float = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ MOEX API
    
    # –ü—Ä–∞–≤–∏–ª–∞ MOEX API –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    MAX_REQUESTS_PER_MINUTE: int = 60  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    MAX_CONCURRENT_REQUESTS: int = 3   # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    RETRY_ATTEMPTS: int = 3            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    RETRY_DELAY: float = 2.0           # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º (—Å–µ–∫—É–Ω–¥—ã)
    BACKOFF_MULTIPLIER: float = 2.0    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    MONITORING_INTERVAL_MIN: int = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    MONITORING_INTERVAL_MAX: int = 420  # 7 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    MIN_SPREAD_THRESHOLD: float = 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (%)
    SPREAD_LEVEL_2: float = 2.0  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è (%)
    SPREAD_LEVEL_3: float = 3.0  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è —è—Ä–∫–æ-–∑–µ–ª–µ–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è (%)
    CLOSE_SPREAD_MIN: float = 0.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (%)
    CLOSE_SPREAD_MAX: float = 0.5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (%)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø—Ä–µ–¥–æ–≤
    MAX_SPREAD_HISTORY: int = 10  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø—Ä–µ–¥–æ–≤
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    ADMIN_USERNAME: str = "@Ildaryakupovv"
    SUPPORT_MESSAGE: str = "–î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ @Ildaryakupovv"
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ MOEX API
    BACKUP_DATA_SOURCES: List[str] = field(default_factory=lambda: [
        "tradingview",
        "investing_com", 
        "yahoo_finance"
    ])
    
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –±–∏—Ä–∂–∏ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    # –ê–∫—Ü–∏–∏ —Å 8:00, —Ñ—å—é—á–µ—Ä—Å—ã —Å 9:00, –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å 9:00
    TRADING_START_TIME: time = time(9, 0)     # 09:00 –ú–°–ö (—Ñ—å—é—á–µ—Ä—Å—ã)
    TRADING_END_TIME: time = time(18, 45)     # 18:45 –ú–°–ö
    TRADING_DAYS: List[int] = field(default_factory=lambda: [0, 1, 2, 3, 4])  # –ü–Ω-–ü—Ç (0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    MONITORED_INSTRUMENTS: Dict[str, str] = field(default_factory=dict)
    
    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        if not self.MONITORED_INSTRUMENTS:
            self.MONITORED_INSTRUMENTS = {
                # –ê–∫—Ü–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—å—é—á–µ—Ä—Å—ã
                "SBER": "SiM5",  # –°–±–µ—Ä–±–∞–Ω–∫
                "GAZP": "GZM5",  # –ì–∞–∑–ø—Ä–æ–º
                "LKOH": "LKM5",  # –õ—É–∫–æ–π–ª
                "NVTK": "NVM5",  # –ù–æ–≤–∞—Ç—ç–∫
                "YNDX": "YNM5",  # –Ø–Ω–¥–µ–∫—Å
                "TCSG": "TCM5",  # TCS Group
                "ROSN": "RSM5",  # –†–æ—Å–Ω–µ—Ñ—Ç—å
                "GMKN": "GMM5",  # –ì–ú–ö –ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å
                "PLZL": "PLM5",  # –ü–æ–ª—é—Å
                "MGNT": "MGM5",  # –ú–∞–≥–Ω–∏—Ç
                "SNGS": "SGM5",  # –°—É—Ä–≥—É—Ç–Ω–µ—Ñ—Ç–µ–≥–∞–∑
                "VTBR": "VTM5",  # –í–¢–ë
                "ALRS": "ALM5",  # –ê–ª—Ä–æ—Å–∞
                "TATN": "TTM5",  # –¢–∞—Ç–Ω–µ—Ñ—Ç—å
                "MTSS": "MTM5",  # –ú–¢–°
            }
    
    @classmethod
    def get_admin_users(cls) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
        if not admin_ids_str:
            return []
        
        try:
            return [int(user_id.strip()) for user_id in admin_ids_str.split(",") if user_id.strip()]
        except ValueError:
            return []
    
    @classmethod
    def is_admin(cls, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in cls.get_admin_users()
    
    def get_lot_multipliers(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤ –ª–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return {
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ MOEX
            "Si": 1000,   # –î–æ–ª–ª–∞—Ä –°–®–ê - —Ä—É–±–ª—å (1000 –¥–æ–ª–ª–∞—Ä–æ–≤)
            "RTS": 1,     # –ò–Ω–¥–µ–∫—Å –†–¢–°
            "MIX": 1,     # –ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏
            "BR": 10,     # –ù–µ—Ñ—Ç—å Brent (10 –±–∞—Ä—Ä–µ–ª–µ–π)
            "GOLD": 1,    # –ó–æ–ª–æ—Ç–æ (1 –∫–≥)
            "SILV": 1,    # –°–µ—Ä–µ–±—Ä–æ (1 –∫–≥)
            # –î–ª—è –∞–∫—Ü–∏–π –æ–±—ã—á–Ω–æ 1 –ª–æ—Ç = 1 –∞–∫—Ü–∏—è, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        }
    
    def get_random_monitoring_interval(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–∂–¥—É 5-7 –º–∏–Ω—É—Ç–∞–º–∏"""
        return random.randint(self.MONITORING_INTERVAL_MIN, self.MONITORING_INTERVAL_MAX)
    
    def is_market_open(self, dt: Optional[datetime] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –±–∏—Ä–∂–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if dt is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è - UTC + 3 —á–∞—Å–∞ —Å–µ–π—á–∞—Å –∑–∏–º–æ–π
            import pytz
            moscow_tz = pytz.timezone('Europe/Moscow')
            dt = datetime.now(moscow_tz)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        if dt.weekday() not in self.TRADING_DAYS:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤
        current_time = dt.time()
        return self.TRADING_START_TIME <= current_time <= self.TRADING_END_TIME
    
    def get_market_status_message(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Ä—ã–Ω–∫–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        import pytz
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        
        if self.is_market_open(now):
            return "üü¢ –ë–∏—Ä–∂–∞ –æ—Ç–∫—Ä—ã—Ç–∞"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±–∏—Ä–∂–∞
        if now.weekday() in self.TRADING_DAYS:
            if now.time() < self.TRADING_START_TIME:
                return f"üî¥ –ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞\nüìÖ –û—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è –≤ {self.TRADING_START_TIME.strftime('%H:%M')} –ú–°–ö"
            else:
                return f"üî¥ –ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞\nüìÖ –û—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ {self.TRADING_START_TIME.strftime('%H:%M')} –ú–°–ö"
        else:
            # –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
            days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            next_trading_day = min(self.TRADING_DAYS)
            return f"üî¥ –ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞ (–≤—ã—Ö–æ–¥–Ω–æ–π)\nüìÖ –û—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ {days[next_trading_day]} –≤ {self.TRADING_START_TIME.strftime('%H:%M')} –ú–°–ö"
    
    def get_trading_schedule_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤"""
        return f"""üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏:

üìà –ê–∫—Ü–∏–∏: 08:00 - {self.TRADING_END_TIME.strftime('%H:%M')} –ú–°–ö
üìä –§—å—é—á–µ—Ä—Å—ã: {self.TRADING_START_TIME.strftime('%H:%M')} - {self.TRADING_END_TIME.strftime('%H:%M')} –ú–°–ö
ü§ñ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {self.TRADING_START_TIME.strftime('%H:%M')} - {self.TRADING_END_TIME.strftime('%H:%M')} –ú–°–ö
üìÖ –¢–æ—Ä–≥–æ–≤—ã–µ –¥–Ω–∏: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
üö´ –í—ã—Ö–æ–¥–Ω—ã–µ: –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏"""
    
    def get_futures_specs(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        return {
            "SiM5": {"underlying": "USD/RUB", "lot_size": 1000, "tick_size": 0.0001},
            "GZM5": {"underlying": "GAZP", "lot_size": 100, "tick_size": 0.001},
            "LKM5": {"underlying": "LKOH", "lot_size": 10, "tick_size": 0.01},
            "NVM5": {"underlying": "NVTK", "lot_size": 10, "tick_size": 0.01},
            "YNM5": {"underlying": "YNDX", "lot_size": 1, "tick_size": 0.01},
            "TCM5": {"underlying": "TCSG", "lot_size": 1, "tick_size": 0.01},
            "RSM5": {"underlying": "ROSN", "lot_size": 10, "tick_size": 0.01},
            "GMM5": {"underlying": "GMKN", "lot_size": 1, "tick_size": 0.01},
            "PLM5": {"underlying": "PLZL", "lot_size": 1, "tick_size": 0.01},
            "MGM5": {"underlying": "MGNT", "lot_size": 1, "tick_size": 0.01},
            "SGM5": {"underlying": "SNGS", "lot_size": 100, "tick_size": 0.001},
            "VTM5": {"underlying": "VTBR", "lot_size": 1000, "tick_size": 0.0001},
            "ALM5": {"underlying": "ALRS", "lot_size": 10, "tick_size": 0.001},
            "TTM5": {"underlying": "TATN", "lot_size": 10, "tick_size": 0.01},
            "MTM5": {"underlying": "MTSS", "lot_size": 10, "tick_size": 0.01},
        }
