"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
"""

import logging
import aiohttp
from typing import Dict, List, Optional, Tuple
from datetime import datetime

logger = logging.getLogger(__name__)

class DataSourceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.sources = {
            "moex": {
                "name": "MOEX ISS API",
                "url": "https://iss.moex.com",
                "status": "unknown",
                "last_check": None,
                "priority": 1,
                "active": True
            },
            "tradingview": {
                "name": "TradingView",
                "url": "https://www.tradingview.com",
                "status": "unknown", 
                "last_check": None,
                "priority": 2,
                "active": False
            },
            "investing": {
                "name": "Investing.com",
                "url": "https://api.investing.com",
                "status": "unknown",
                "last_check": None,
                "priority": 3,
                "active": False
            },
            "yahoo_finance": {
                "name": "Yahoo Finance",
                "url": "https://query1.finance.yahoo.com",
                "status": "unknown",
                "last_check": None,
                "priority": 4,
                "active": False
            },
            "alphavantage": {
                "name": "Alpha Vantage",
                "url": "https://www.alphavantage.co",
                "status": "unknown",
                "last_check": None,
                "priority": 5,
                "active": False
            },
            "finam": {
                "name": "Finam Trade API",
                "url": "https://trade-api.finam.ru",
                "status": "unknown",
                "last_check": None,
                "priority": 6,
                "active": False
            }
        }
        
    async def check_source_status(self, source_key: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        source = self.sources.get(source_key)
        if not source:
            return "not_found"
            
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(source["url"]) as response:
                    if response.status == 200:
                        status = "working"
                    elif response.status in [403, 429]:
                        status = "blocked"
                    else:
                        status = "error"
        except aiohttp.ClientError:
            status = "unreachable"
        except Exception:
            status = "error"
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.sources[source_key]["status"] = status
        self.sources[source_key]["last_check"] = datetime.now()
        
        return status
        
    async def check_all_sources(self) -> Dict[str, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        results = {}
        
        for source_key in self.sources.keys():
            status = await self.check_source_status(source_key)
            results[source_key] = status
            
        return results
        
    def get_status_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        message = "üîç *–ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•*\n\n"
        
        for source_key, source in self.sources.items():
            name = source["name"]
            status = source["status"]
            last_check = source["last_check"]
            priority = source["priority"]
            active = source["active"]
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            if status == "working":
                status_emoji = "‚úÖ"
                status_text = "—Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ"
            elif status == "blocked":
                status_emoji = "üö´"
                status_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            elif status == "error":
                status_emoji = "‚ùå"
                status_text = "–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            elif status == "unreachable":
                status_emoji = "üì°"
                status_text = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            else:
                status_emoji = "‚ùì"
                status_text = "–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
                
            # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            active_text = "üü¢ –∞–∫—Ç–∏–≤–µ–Ω" if active else "üî¥ –æ—Ç–∫–ª—é—á–µ–Ω"
            
            message += f"*{priority}. {name}*\n"
            message += f"{status_emoji} {status_text} | {active_text}\n"
            
            if last_check:
                check_time = last_check.strftime("%H:%M:%S")
                message += f"‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {check_time}\n"
                
            message += "\n"
            
        return message
        
    def get_restart_keyboard(self, source_key: str) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        source_name = self.sources[source_key]["name"]
        
        return {
            "inline_keyboard": [[
                {"text": "‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "callback_data": f"restart_{source_key}"},
                {"text": "‚ùå –ù–µ—Ç", "callback_data": f"cancel_restart_{source_key}"}
            ]]
        }
        
    def restart_source(self, source_key: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if source_key in self.sources:
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
            self.sources[source_key]["status"] = "unknown"
            self.sources[source_key]["last_check"] = None
            logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {source_key} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            return True
        return False
        
    def get_active_sources(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [key for key, source in self.sources.items() if source["active"]]
        
    def set_source_active(self, source_key: str, active: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source_key in self.sources:
            self.sources[source_key]["active"] = active
            
    def get_working_sources(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [key for key, source in self.sources.items() 
                if source["status"] == "working" and source["active"]]