"""
–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≥–æ–ª—É–±—ã—Ö —Ñ–∏—à–µ–∫ MOEX
–§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
"""

import asyncio
import aiohttp
import logging
from datetime import datetime
from typing import Dict, List, Tuple

logger = logging.getLogger(__name__)

# –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ–ª—É–±—ã–µ —Ñ–∏—à–∫–∏
BLUE_CHIPS_CORE = {
    'SBER': 'SBERF',  # –°–±–µ—Ä–±–∞–Ω–∫ - —Å–∞–º–∞—è –ª–∏–∫–≤–∏–¥–Ω–∞—è –ø–∞—Ä–∞
    'GAZP': 'GAZPF',  # –ì–∞–∑–ø—Ä–æ–º - –≤—Ç–æ—Ä–∞—è –ø–æ –æ–±—ä–µ–º–∞–º  
    'LKOH': 'LKZ5',   # –õ—É–∫–æ–π–ª - –Ω–µ—Ñ—Ç—è–Ω–∞—è
    'GMKN': 'GKZ5',   # –ù–æ—Ä–Ω–∏–∫–µ–ª—å - –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∞—è
    'VTBR': 'VBZ5',   # –í–¢–ë - –±–∞–Ω–∫–æ–≤—Å–∫–∞—è
    'ROSN': 'RNZ5',   # –†–æ—Å–Ω–µ—Ñ—Ç—å - –Ω–µ—Ñ—Ç—è–Ω–∞—è
    'TATN': 'TNZ5',   # –¢–∞—Ç–Ω–µ—Ñ—Ç—å - –Ω–µ—Ñ—Ç—è–Ω–∞—è  
    'ALRS': 'ALZ5',   # –ê–ª—Ä–æ—Å–∞ - –∞–ª–º–∞–∑–Ω–∞—è
}

async def validate_blue_chips_only():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥–æ–ª—É–±—ã—Ö —Ñ–∏—à–µ–∫"""
    
    print('üîµ –í–ê–õ–ò–î–ê–¶–ò–Ø –ì–û–õ–£–ë–´–• –§–ò–®–ï–ö MOEX:')
    print()
    
    valid_pairs = []
    problem_pairs = []
    
    async with aiohttp.ClientSession() as session:
        for stock, futures in BLUE_CHIPS_CORE.items():
            print(f'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {stock}/{futures}...')
            
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                stock_url = f'https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/{stock}.json?iss.meta=off'
                async with session.get(stock_url) as response:
                    if response.status != 200:
                        problem_pairs.append((stock, futures, f"–ê–∫—Ü–∏—è HTTP {response.status}"))
                        continue
                        
                    stock_data = await response.json()
                    
                    if 'securities' not in stock_data or not stock_data['securities'].get('data'):
                        problem_pairs.append((stock, futures, "–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—å—é—á–µ—Ä—Å–∞
                futures_url = f'https://iss.moex.com/iss/engines/futures/markets/forts/boards/RFUD/securities/{futures}.json?iss.meta=off'
                async with session.get(futures_url) as response:
                    if response.status != 200:
                        problem_pairs.append((stock, futures, f"–§—å—é—á–µ—Ä—Å HTTP {response.status}"))
                        continue
                        
                    futures_data = await response.json()
                    
                    if 'securities' not in futures_data or not futures_data['securities'].get('data'):
                        problem_pairs.append((stock, futures, "–§—å—é—á–µ—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                        continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã —Å fallback –ª–æ–≥–∏–∫–æ–π
                stock_price = extract_price(stock_data)
                futures_price = extract_price(futures_data)
                
                if stock_price and futures_price:
                    spread = ((futures_price - stock_price) / stock_price) * 100
                    valid_pairs.append((stock, futures, stock_price, futures_price, spread))
                    print(f'‚úÖ {stock}/{futures}: {stock_price:.2f}‚ÇΩ / {futures_price:.2f}‚ÇΩ (—Å–ø—Ä–µ–¥: {spread:.2f}%)')
                elif stock_price or futures_price:
                    # –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    problem_pairs.append((stock, futures, f"–ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –∞–∫—Ü–∏—è={stock_price}, —Ñ—å—é—á–µ—Ä—Å={futures_price}"))
                    print(f'‚ö†Ô∏è {stock}/{futures}: —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
                else:
                    problem_pairs.append((stock, futures, "–ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"))
                    print(f'‚ùå {stock}/{futures}: –Ω–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫')
                    
            except Exception as e:
                problem_pairs.append((stock, futures, f"–û—à–∏–±–∫–∞: {str(e)}"))
                print(f'‚ùå {stock}/{futures}: –æ—à–∏–±–∫–∞ - {e}')
    
    print()
    print(f'üìä –†–ï–ó–£–õ–¨–¢–ê–¢:')
    print(f'‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–∞—Ä: {len(valid_pairs)}')
    print(f'‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä: {len(problem_pairs)}')
    
    if valid_pairs:
        print()
        print('üéØ –†–ê–ë–û–ß–ò–ï –ü–ê–†–´ –î–õ–Ø –ê–†–ë–ò–¢–†–ê–ñ–ê:')
        for stock, futures, stock_price, futures_price, spread in valid_pairs:
            urgency = "üü¢üü¢" if abs(spread) > 2 else "üü¢" if abs(spread) > 1 else "‚ö™"
            print(f'   {urgency} {stock}/{futures}: {spread:+.2f}%')
    
    if problem_pairs:
        print()
        print('üö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–ê–†–´:')
        for stock, futures, error in problem_pairs:
            print(f'   ‚Ä¢ {stock}/{futures}: {error}')
    
    return valid_pairs, problem_pairs

def extract_price(api_data):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö MOEX API —Å fallback –ª–æ–≥–∏–∫–æ–π"""
    try:
        if 'securities' not in api_data or not api_data['securities'].get('data'):
            return None
            
        row = api_data['securities']['data'][0]
        columns = api_data['securities']['columns']
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_fields = ['LAST', 'PREVPRICE', 'MARKETPRICE', 'WAPRICE', 'OPEN']
        
        for field in price_fields:
            if field in columns:
                idx = columns.index(field)
                if len(row) > idx and row[idx] is not None:
                    price = row[idx]
                    if isinstance(price, (int, float)) and price > 0:
                        return float(price)
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None

if __name__ == "__main__":
    asyncio.run(validate_blue_chips_only())