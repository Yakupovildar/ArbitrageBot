import logging
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from enum import Enum
import asyncio
from moex_api import MOEXAPIClient
from config import Config

logger = logging.getLogger(__name__)

class PairStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    ACTIVE = "–∞–∫—Ç–∏–≤–Ω–∞"
    BLOCKED = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
    UNAVAILABLE = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

@dataclass
class PairInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    stock_ticker: str
    futures_ticker: str
    status: PairStatus
    reason: str
    stock_price: Optional[float] = None
    futures_price: Optional[float] = None
    spread_percent: Optional[float] = None
    last_check: Optional[str] = None

class PairStatusManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    
    def __init__(self):
        self.config = Config()
        self.pair_statuses: Dict[str, PairInfo] = {}
        self.blocked_pairs: List[str] = []
        self.unavailable_pairs: List[str] = []
        self.active_pairs: List[str] = []
        
    async def check_all_pairs(self) -> Dict[str, PairInfo]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        
        async with MOEXAPIClient() as api:
            for stock_ticker, futures_ticker in self.config.MONITORED_INSTRUMENTS.items():
                pair_key = f"{stock_ticker}/{futures_ticker}"
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä—É {pair_key}...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
                    stock_price = await api.get_stock_price(stock_ticker)
                    futures_price = await api.get_futures_price(futures_ticker)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                    if stock_price is None:
                        self._mark_unavailable(stock_ticker, futures_ticker, f"–ê–∫—Ü–∏—è {stock_ticker}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")
                        continue
                        
                    if futures_price is None:
                        self._mark_unavailable(stock_ticker, futures_ticker, f"–§—å—é—á–µ—Ä—Å {futures_ticker}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread_percent = self._calculate_spread(stock_price, futures_price)
                    
                    # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –±–ª–æ–∫–∏—Ä—É–µ–º —Å–ø—Ä–µ–¥—ã >30%
                    if abs(spread_percent) > 30.0:
                        self._mark_blocked(stock_ticker, futures_ticker, 
                                         f"–ê–Ω–æ–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {spread_percent:.2f}% (>30%)", 
                                         stock_price, futures_price, spread_percent)
                        continue
                    
                    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä
                    if self._is_personally_problematic(stock_ticker, futures_ticker, stock_price, futures_price):
                        self._mark_blocked(stock_ticker, futures_ticker,
                                         "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã",
                                         stock_price, futures_price, spread_percent)
                        continue
                    
                    # –ü–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                    self._mark_active(stock_ticker, futures_ticker, stock_price, futures_price, spread_percent)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—ã {pair_key}: {e}")
                    self._mark_unavailable(stock_ticker, futures_ticker, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
                    
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
                await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        
        self._update_lists()
        self._log_summary()
        return self.pair_statuses
    
    async def validate_all_pairs_fast(self) -> Dict[str, PairInfo]:
        """–ë–´–°–¢–†–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫"""
        logger.info("üöÄ –ë–´–°–¢–†–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)")
        
        async with MOEXAPIClient() as api:
            for pair_key, (stock_ticker, futures_ticker) in self.config.MONITORED_INSTRUMENTS.items():
                try:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä—É {stock_ticker}/{futures_ticker}...")
                    
                    # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –ë–ï–ó –∑–∞–¥–µ—Ä–∂–µ–∫
                    stock_price = await api.get_stock_price(stock_ticker)
                    futures_price = await api.get_futures_price(futures_ticker)
                    
                    if not stock_price:
                        self._mark_unavailable(stock_ticker, futures_ticker, f"–ê–∫—Ü–∏—è {stock_ticker}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")
                        continue
                        
                    if not futures_price:
                        self._mark_unavailable(stock_ticker, futures_ticker, f"–§—å—é—á–µ—Ä—Å {futures_ticker}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")
                        continue
                    
                    # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
                    spread_percent = self._calculate_spread(stock_price, futures_price)
                    
                    if abs(spread_percent) > 30:
                        self._mark_blocked(stock_ticker, futures_ticker, 
                                         f"–ê–Ω–æ–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {spread_percent:.2f}% (>30%)",
                                         stock_price, futures_price, spread_percent)
                        continue
                    
                    if self._is_personally_problematic(stock_ticker, futures_ticker, stock_price, futures_price):
                        self._mark_blocked(stock_ticker, futures_ticker, 
                                         "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã",
                                         stock_price, futures_price, spread_percent)
                        continue
                    
                    # –ü–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                    self._mark_active(stock_ticker, futures_ticker, stock_price, futures_price, spread_percent)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—ã {pair_key}: {e}")
                    self._mark_unavailable(stock_ticker, futures_ticker, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        
        self._update_lists()
        self._log_summary()
        return self.pair_statuses
    
    def _calculate_spread(self, stock_price: float, futures_price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞ –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏"""
        if stock_price <= 0 or futures_price <= 0:
            return 999.0  # –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥
        
        return ((futures_price - stock_price) / stock_price) * 100
    
    def _is_personally_problematic(self, stock_ticker: str, futures_ticker: str, 
                                 stock_price: float, futures_price: float) -> bool:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä"""
        
        # SGZH/SZZ5 - –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –ø–∞—Ä–∞
        if stock_ticker == "SGZH" and futures_ticker == "SZZ5":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–º
            ratio = futures_price / stock_price if stock_price > 0 else 999
            if ratio > 5 or ratio < 0.2:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ —á–µ–º –≤ 5 —Ä–∞–∑
                logger.warning(f"SGZH/SZZ5: –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω {ratio:.2f}")
                return True
        
        # NKNC/NKZ5 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–µ–Ω–∞—Ö  
        if stock_ticker == "NKNC" and futures_ticker == "NKZ5":
            ratio = futures_price / stock_price if stock_price > 0 else 999
            if ratio > 10:  # –§—å—é—á–µ—Ä—Å –¥–æ—Ä–æ–∂–µ –∞–∫—Ü–∏–∏ –≤ 10+ —Ä–∞–∑
                logger.warning(f"NKNC/NKZ5: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω {ratio:.2f}")
                return True
                
        # FEES/FSZ5 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        if stock_ticker == "FEES" and futures_ticker == "FSZ5":
            ratio = stock_price / futures_price if futures_price > 0 else 999
            if ratio > 500:  # –ê–∫—Ü–∏—è –¥–æ—Ä–æ–∂–µ —Ñ—å—é—á–µ—Ä—Å–∞ –≤ 500+ —Ä–∞–∑
                logger.warning(f"FEES/FSZ5: –æ–±—Ä–∞—Ç–Ω–æ–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {ratio:.2f}")
                return True
        
        return False
    
    def _mark_active(self, stock_ticker: str, futures_ticker: str, 
                    stock_price: float, futures_price: float, spread_percent: float):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–∞—Ä—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é"""
        pair_key = f"{stock_ticker}/{futures_ticker}"
        self.pair_statuses[pair_key] = PairInfo(
            stock_ticker=stock_ticker,
            futures_ticker=futures_ticker,
            status=PairStatus.ACTIVE,
            reason="–ü–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            stock_price=stock_price,
            futures_price=futures_price,
            spread_percent=spread_percent
        )
        logger.info(f"‚úÖ {pair_key}: –∞–∫—Ç–∏–≤–Ω–∞ (—Å–ø—Ä–µ–¥ {spread_percent:.2f}%)")
    
    def _mark_blocked(self, stock_ticker: str, futures_ticker: str, reason: str,
                     stock_price: Optional[float] = None, futures_price: Optional[float] = None,
                     spread_percent: Optional[float] = None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–∞—Ä—É –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é"""
        pair_key = f"{stock_ticker}/{futures_ticker}"
        self.pair_statuses[pair_key] = PairInfo(
            stock_ticker=stock_ticker,
            futures_ticker=futures_ticker,
            status=PairStatus.BLOCKED,
            reason=reason,
            stock_price=stock_price,
            futures_price=futures_price,
            spread_percent=spread_percent
        )
        logger.warning(f"üö´ {pair_key} (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞): {reason}")
    
    def _mark_unavailable(self, stock_ticker: str, futures_ticker: str, reason: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–∞—Ä—É –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é"""
        pair_key = f"{stock_ticker}/{futures_ticker}"
        self.pair_statuses[pair_key] = PairInfo(
            stock_ticker=stock_ticker,
            futures_ticker=futures_ticker,
            status=PairStatus.UNAVAILABLE,
            reason=reason
        )
        logger.error(f"‚ùå {pair_key} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞): {reason}")
    
    def _update_lists(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–∞—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
        self.active_pairs = []
        self.blocked_pairs = []
        self.unavailable_pairs = []
        
        for pair_key, info in self.pair_statuses.items():
            if info.status == PairStatus.ACTIVE:
                self.active_pairs.append(pair_key)
            elif info.status == PairStatus.BLOCKED:
                self.blocked_pairs.append(pair_key)
            elif info.status == PairStatus.UNAVAILABLE:
                self.unavailable_pairs.append(pair_key)
    
    def _log_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–∞—Ä"""
        total = len(self.pair_statuses)
        active = len(self.active_pairs)
        blocked = len(self.blocked_pairs)
        unavailable = len(self.unavailable_pairs)
        
        logger.info(f"üìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò –¢–û–†–ì–û–í–´–• –ü–ê–†:")
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active}/{total}")
        logger.info(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {blocked}/{total}")
        logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ: {unavailable}/{total}")
        
        if blocked > 0:
            logger.info("üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–´:")
            for pair in self.blocked_pairs:
                info = self.pair_statuses[pair]
                logger.info(f"   {pair}: {info.reason}")
        
        if unavailable > 0:
            logger.info("‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–´:")
            for pair in self.unavailable_pairs:
                info = self.pair_statuses[pair]
                logger.info(f"   {pair}: {info.reason}")
    
    def is_pair_available(self, stock_ticker: str, futures_ticker: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        pair_key = f"{stock_ticker}/{futures_ticker}"
        return pair_key in self.active_pairs
    
    def get_available_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä"""
        return self.active_pairs.copy()
    
    def get_pair_status_info(self, stock_ticker: str, futures_ticker: str) -> Optional[PairInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–∞—Ä—ã"""
        pair_key = f"{stock_ticker}/{futures_ticker}"
        return self.pair_statuses.get(pair_key)