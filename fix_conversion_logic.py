#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ü–µ–Ω —Ñ—å—é—á–µ—Ä—Å–æ–≤
"""

import asyncio
import logging
from moex_api import MOEXAPIClient
from config import Config

logging.basicConfig(level=logging.INFO)

async def investigate_conversion_logic():
    """–ü–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π"""
    print("üî¨ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ö–û–ù–í–ï–†–°–ò–ò –¶–ï–ù –§–¨–Æ–ß–ï–†–°–û–í")
    print("=" * 60)
    
    config = Config()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    problematic_pairs = [
        ("SGZH", "SZZ5"),  # 1.609‚ÇΩ / 16.85‚ÇΩ
        ("AFKS", "AKZ5"),  # 16.595‚ÇΩ / 174.62‚ÇΩ
        ("ABIO", "ISZ5"),  # 78.46‚ÇΩ / 8.38‚ÇΩ
        ("NKNC", "NKZ5"),  # 88.05‚ÇΩ / 1293.73‚ÇΩ
    ]
    
    async with MOEXAPIClient() as api:
        for stock_ticker, futures_ticker in problematic_pairs:
            print(f"\nüß™ –ê–ù–ê–õ–ò–ó –ü–ê–†–´ {stock_ticker}/{futures_ticker}:")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            stock_price = await api.get_stock_price(stock_ticker)
            futures_price = await api.get_futures_price(futures_ticker)
            
            if stock_price and futures_price:
                # –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                current_coeff = config.get_futures_lot_value(futures_ticker)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                correct_coeff = stock_price / futures_price if futures_price != 0 else 1
                
                print(f"üìà –ê–∫—Ü–∏—è {stock_ticker}: {stock_price:.3f}‚ÇΩ")
                print(f"üìâ –§—å—é—á–µ—Ä—Å {futures_ticker}: {futures_price:.3f}‚ÇΩ")
                print(f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {current_coeff}")
                print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {correct_coeff:.6f}")
                print(f"‚ùå –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö: {abs(current_coeff - correct_coeff):.6f}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                wrong_converted = futures_price * current_coeff
                right_converted = futures_price * correct_coeff
                
                wrong_spread = ((wrong_converted - stock_price) / stock_price) * 100
                right_spread = ((right_converted - stock_price) / stock_price) * 100
                
                print(f"üî¥ –° —Ç–µ–∫—É—â–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º: {wrong_converted:.2f}‚ÇΩ (—Å–ø—Ä–µ–¥: {wrong_spread:.2f}%)")
                print(f"üü¢ –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º: {right_converted:.2f}‚ÇΩ (—Å–ø—Ä–µ–¥: {right_spread:.2f}%)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
                alt1 = futures_price / current_coeff  # –î–µ–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
                alt1_spread = ((alt1 - stock_price) / stock_price) * 100
                print(f"üîµ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (–¥–µ–ª–µ–Ω–∏–µ): {alt1:.2f}‚ÇΩ (—Å–ø—Ä–µ–¥: {alt1_spread:.2f}%)")
                
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è {stock_ticker}/{futures_ticker}")

if __name__ == "__main__":
    asyncio.run(investigate_conversion_logic())