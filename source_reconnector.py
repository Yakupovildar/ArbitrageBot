"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from config import Config
from data_sources import DataSourceManager
from database import db

logger = logging.getLogger(__name__)

class SourceReconnector:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
    
    def __init__(self, data_sources: DataSourceManager, config: Config, sources_library=None):
        self.data_sources = data_sources
        self.config = config
        self.sources_library = sources_library
        self.reconnect_interval = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.is_running = False
        self.task = None
        self.last_reconnect_attempt = {}
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.is_running:
            return
            
        self.is_running = True
        self.task = asyncio.create_task(self._reconnect_loop())
        logger.info("üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def _reconnect_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –±–∏—Ä–∂–∞
                if self.config.is_market_open():
                    await self._attempt_reconnect()
                else:
                    logger.debug("–ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
                await asyncio.sleep(self.reconnect_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _attempt_reconnect(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        failed_sources = await self._get_failed_sources()
        
        if not failed_sources:
            logger.debug("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
            
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {len(failed_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        success_count = await self._try_reconnect_existing(failed_sources)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ–Ω—ã
        if self.sources_library:
            replaced_count = await self.sources_library.check_and_replace_failed_sources()
            if replaced_count > 0:
                logger.info(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ {replaced_count} –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                success_count += replaced_count
        
        if success_count > 0:
            logger.info(f"üéâ –í—Å–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ/–∑–∞–º–µ–Ω–µ–Ω–æ: {success_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫")
    
    async def _try_reconnect_existing(self, failed_sources: List[str]) -> int:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        success_count = 0
        
        for source_name in failed_sources:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                if self._should_skip_source(source_name):
                    continue
                
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {source_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
                self.last_reconnect_attempt[source_name] = datetime.now()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                success = await self._reconnect_source(source_name)
                
                if success:
                    success_count += 1
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {source_name}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ database
                    await db.update_source_status(source_name, "working")
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {source_name}")
                    await db.update_source_status(source_name, "error", "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {source_name}: {e}")
        
        return success_count
    
    async def _get_failed_sources(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            return await db.get_failed_sources()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return []
    
    def _should_skip_source(self, source_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏)"""
        if source_name not in self.last_reconnect_attempt:
            return False
        
        last_attempt = self.last_reconnect_attempt[source_name]
        min_interval = timedelta(minutes=15)  # –ú–∏–Ω–∏–º—É–º 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        return datetime.now() - last_attempt < min_interval
    
    async def _reconnect_source(self, source_name: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
        try:
            if source_name == "moex":
                return await self._test_moex_connection()
            elif source_name == "tradingview":
                return await self._test_tradingview_connection()
            elif source_name == "investing_com":
                return await self._test_investing_connection()
            elif source_name == "yahoo_finance":
                return await self._test_yahoo_connection()
            elif source_name == "alpha_vantage":
                return await self._test_alpha_connection()
            elif source_name == "finam":
                return await self._test_finam_connection()
            elif source_name == "tinkoff":
                return await self._test_tinkoff_connection()
            elif source_name == "sberbank":
                return await self._test_sberbank_connection()
            elif source_name == "bcs":
                return await self._test_bcs_connection()
            elif source_name == "vtb":
                return await self._test_vtb_connection()
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source_name}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {source_name}: {e}")
            return False
    
    async def _test_moex_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MOEX API"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                url = f"{self.config.MOEX_API_BASE_URL}/engines/stock/markets/shares/securities.json"
                async with session.get(url) as response:
                    return response.status == 200
        except:
            return False
    
    async def _test_tradingview_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å TradingView"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                url = "https://scanner.tradingview.com/russia/scan"
                async with session.get(url) as response:
                    return response.status == 200
        except:
            return False
    
    async def _test_investing_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Investing.com"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                url = "https://www.investing.com/equities/russia"
                async with session.get(url) as response:
                    return response.status == 200
        except:
            return False
    
    async def _test_yahoo_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Yahoo Finance"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                url = "https://query1.finance.yahoo.com/v8/finance/chart/GAZP.ME"
                async with session.get(url) as response:
                    return response.status == 200
        except:
            return False
    
    async def _test_alpha_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Alpha Vantage"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                url = "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=MSFT&apikey=demo"
                async with session.get(url) as response:
                    return response.status == 200
        except:
            return False
    
    async def _test_finam_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Finam Trade API"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                url = "https://trade-api.finam.ru/public/api/v1/time"
                async with session.get(url) as response:
                    return response.status == 200
        except:
            return False
    
    # –î–ª—è API —Å —Ç–æ–∫–µ–Ω–∞–º–∏ - –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    async def _test_tinkoff_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Tinkoff Invest API"""
        # –¢—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("Tinkoff API —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π")
        return True
    
    async def _test_sberbank_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Sberbank Invest API"""
        # –¢—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("Sberbank API —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π")
        return True
    
    async def _test_bcs_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–ö–° –ë—Ä–æ–∫–µ—Ä API"""
        # –¢—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("–ë–ö–° API —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π")
        return True
    
    async def _test_vtb_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –í–¢–ë –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ API"""
        # –¢—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω - –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("–í–¢–ë API —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π")
        return True
    
    async def get_reconnect_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        failed_sources = await self._get_failed_sources()
        failed_count = len(failed_sources)
        total_count = 10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        working_count = total_count - failed_count
        
        return {
            "total_sources": total_count,
            "working_sources": working_count,
            "failed_sources": failed_count,
            "last_check": datetime.now().strftime("%H:%M:%S"),
            "next_check_in": f"{self.reconnect_interval // 60} –º–∏–Ω—É—Ç"
        }