#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
"""

import asyncio
import logging
from pair_status_manager import PairStatusManager, PairStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_pair_status_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–∞—Ä"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–¢–ê–¢–£–°–û–í –¢–û–†–ì–û–í–´–• –ü–ê–†")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤
    status_manager = PairStatusManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–∞—Ä
    print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
    pair_statuses = await status_manager.check_all_pairs()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {len(status_manager.active_pairs)}")
    print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã: {len(status_manager.blocked_pairs)}")
    print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {len(status_manager.unavailable_pairs)}")
    print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {len(pair_statuses)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
    if status_manager.active_pairs:
        print(f"\n‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ü–ê–†–´ ({len(status_manager.active_pairs)}):")
        for pair in status_manager.active_pairs[:10]:  # –ü–µ—Ä–≤—ã–µ 10
            info = pair_statuses[pair]
            spread_str = f" (—Å–ø—Ä–µ–¥: {info.spread_percent:.2f}%)" if info.spread_percent else ""
            print(f"   {pair}{spread_str}")
        if len(status_manager.active_pairs) > 10:
            print(f"   ... –∏ –µ—â–µ {len(status_manager.active_pairs) - 10} –ø–∞—Ä")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    if status_manager.blocked_pairs:
        print(f"\nüö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–´ ({len(status_manager.blocked_pairs)}):")
        for pair in status_manager.blocked_pairs:
            info = pair_statuses[pair]
            print(f"   {pair}: {info.reason}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
    if status_manager.unavailable_pairs:
        print(f"\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–´ ({len(status_manager.unavailable_pairs)}):")
        for pair in status_manager.unavailable_pairs:
            info = pair_statuses[pair]
            print(f"   {pair}: {info.reason}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–ê–†:")
    test_pairs = [
        ("SBER", "SBERF"),
        ("SGZH", "SZZ5"),  # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –ø–∞—Ä–∞
        ("NKNC", "NKZ5"),  # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –ø–∞—Ä–∞
        ("TCSG", "TCZ5"),  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞—Ä–∞
    ]
    
    for stock, futures in test_pairs:
        is_available = status_manager.is_pair_available(stock, futures)
        status_info = status_manager.get_pair_status_info(stock, futures)
        
        if is_available:
            print(f"   ‚úÖ {stock}/{futures}: –î–û–°–¢–£–ü–ù–ê")
        else:
            status_text = status_info.status.value if status_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            reason = status_info.reason if status_info else "–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            print(f"   üö´ {stock}/{futures}: {status_text.upper()} - {reason}")
    
    print("\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(test_pair_status_system())