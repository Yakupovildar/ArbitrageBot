#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ MOEX –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è python-telegram-bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram Bot API
"""

import os
import asyncio
import aiohttp
import json
import logging
import random
import pytz
from datetime import datetime, timezone
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
from config import Config
from moex_api import MOEXAPIClient
from arbitrage_calculator import ArbitrageCalculator
from monitoring_controller import MonitoringController
from data_sources import DataSourceManager
from user_settings import UserSettingsManager
from signal_queue import SignalQueue, UserMonitoringScheduler
from source_reconnector import SourceReconnector
from database import db
from sources_library import sources_library
from daily_validator import DailyValidator

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø—Ä–µ–¥–æ–≤  
class SpreadHistory:
    def __init__(self, max_records: int = 10):
        self.max_records = max_records
        self.records = []
    
    def add_record(self, stock_ticker: str, futures_ticker: str, spread: float, signal_type: str):
        record = {
            'timestamp': datetime.now(),
            'stock_ticker': stock_ticker,
            'futures_ticker': futures_ticker,
            'spread': spread,
            'signal_type': signal_type
        }
        self.records.append(record)
        if len(self.records) > self.max_records:
            self.records = self.records[-self.max_records:]
    
    def format_history(self) -> str:
        if not self.records:
            return "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
        
        message = "üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤:\n\n"
        for i, record in enumerate(reversed(self.records)):
            timestamp = record['timestamp'].strftime('%d.%m %H:%M')
            message += f"{i+1}. {record['stock_ticker']}/{record['futures_ticker']}\n"
            message += f"   üìà –°–ø—Ä–µ–¥: {record['spread']:.2f}%\n"
            message += f"   üéØ {record['signal_type']}\n"
            message += f"   ‚è∞ {timestamp}\n\n"
        return message

logger = logging.getLogger(__name__)

@dataclass
class TelegramUpdate:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è Telegram update"""
    update_id: int
    message: Optional[Dict] = None
    callback_query: Optional[Dict] = None
    
class SimpleTelegramBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç —á–µ—Ä–µ–∑ HTTP API"""
    
    def __init__(self, token: str):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.session = None
        self.offset = 0
        self.subscribers: Set[int] = set()
        self.config = Config()
        self.calculator = ArbitrageCalculator()
        self.spread_history = SpreadHistory(self.config.MAX_SPREAD_HISTORY)
        self.monitoring_controller = MonitoringController()
        self.data_sources = DataSourceManager()
        self.user_settings = UserSettingsManager()
        self.signal_queue = SignalQueue(max_signals_per_batch=3, signal_interval=3.0)
        self.monitoring_scheduler = UserMonitoringScheduler()
        
        # –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        self.source_reconnector = None
        
        # –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.daily_validator = DailyValidator()
        self.last_pair_validation = None
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = db  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.init_connection()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö 10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
        logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        active_sources = await sources_library.initialize_active_sources(10)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É data_sources —Å –Ω–æ–≤–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        self.data_sources.sync_with_library(sources_library)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await self._restore_user_settings()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.source_reconnector = SourceReconnector(self.data_sources, self.config, sources_library)
        await self.source_reconnector.start()
        
        # –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
        asyncio.create_task(self.daily_validation_task())
        
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É
        await self._save_all_user_settings()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if self.source_reconnector:
            await self.source_reconnector.stop()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.close_connection()
        
        if self.session:
            await self.session.close()
    
    async def send_message(self, chat_id: int, text: str, parse_mode: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.session:
            return False
            
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text
        }
        
        if parse_mode:
            data["parse_mode"] = parse_mode
        
        try:
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    return True
                else:
                    response_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status} - {response_text}")
                    logger.error(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:200]}...")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
            
    async def send_message_with_keyboard(self, chat_id: int, text: str, keyboard: dict, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        if not self.session:
            return False
            
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "reply_markup": keyboard
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
            return False
            
    async def answer_callback_query(self, callback_query_id: str, text: str = "") -> bool:
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        if not self.session:
            return False
            
        url = f"{self.base_url}/answerCallbackQuery"
        data = {
            "callback_query_id": callback_query_id,
            "text": text
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
            return False
    
    async def edit_message_with_keyboard(self, chat_id: int, message_id: int, text: str, keyboard: dict) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        if not self.session:
            return False
            
        url = f"{self.base_url}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "reply_markup": keyboard
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def edit_message_text(self, chat_id: int, message_id: int, text: str, keyboard: dict) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        if not self.session:
            return False
            
        url = f"{self.base_url}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "reply_markup": keyboard
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def get_updates(self) -> List[TelegramUpdate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not self.session:
            return []
            
        url = f"{self.base_url}/getUpdates"
        params = {
            "offset": self.offset,
            "timeout": 10
        }
        
        try:
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    updates = []
                    
                    for update_data in data.get("result", []):
                        update = TelegramUpdate(
                            update_id=update_data["update_id"],
                            message=update_data.get("message"),
                            callback_query=update_data.get("callback_query")
                        )
                        updates.append(update)
                        self.offset = max(self.offset, update_data["update_id"] + 1)
                    
                    return updates
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                    return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def handle_command(self, chat_id: int, command: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        
        if command == "/start":
            welcome_text = """ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ MOEX!*

–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∞–∫—Ü–∏—è–º–∏ –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ.

üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –£–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö  
‚Ä¢ –ì–∏–±–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –ø–æ—Ä–æ–≥–∏ —Å–ø—Ä–µ–¥–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ú® *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*"""
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
            main_menu_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_start_monitoring"},
                        {"text": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_stop_monitoring"}
                    ],
                    [
                        {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "cmd_settings"},
                        {"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "cmd_status"}
                    ],
                    [
                        {"text": "üìà –ò—Å—Ç–æ—Ä–∏—è", "callback_data": "cmd_history"},
                        {"text": "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "cmd_schedule"}
                    ],
                    [
                        {"text": "üéØ –î–µ–º–æ", "callback_data": "cmd_demo"},
                        {"text": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "cmd_support"}
                    ],
                    [
                        {"text": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "show_main_menu"}
                    ]
                ]
            }
            
            await self.send_message_with_keyboard(chat_id, welcome_text, main_menu_keyboard)
            
        elif command.startswith("/help"):
            help_text = """üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ä—ã–Ω–∫–∞
/start_monitoring - –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤
/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å –±–∏—Ä–∂–∏
/demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
/settings - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/support - –°–≤—è–∑—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
/pairs - –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üîç *–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã:*
üìà SBER/SiM5 | –°–ø—Ä–µ–¥: 2.5%
üí∞ –ê–∫—Ü–∏–∏: –ö–£–ü–ò–¢–¨ 100 –ª–æ—Ç–æ–≤
üìä –§—å—é—á–µ—Ä—Å: –ü–†–û–î–ê–¢–¨ 1 –ª–æ—Ç

‚ö° *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5-7 –º–∏–Ω—É—Ç (—Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)*"""
            await self.send_message(chat_id, help_text)
            
        elif command.startswith("/status"):
            market_status = self.config.get_market_status_message()
            user_monitoring = self.monitoring_controller.is_user_monitoring(user_id)
            
            status_text = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:*

{market_status}

üîå MOEX API: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω
üìà –í–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user_monitoring else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.monitoring_controller.get_active_users_count()}
üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_id in self.subscribers else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"}
üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.calculator.open_positions)}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 5-7 –º–∏–Ω (—Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_monitoring –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
            await self.send_message(chat_id, status_text)
            
        elif command.startswith("/history"):
            history_text = self.spread_history.format_history()
            await self.send_message(chat_id, history_text)
            
        elif command.startswith("/schedule"):
            schedule_info = self.config.get_trading_schedule_info()
            market_status = self.config.get_market_status_message()
            full_message = f"{market_status}\n\n{schedule_info}"
            await self.send_message(chat_id, full_message)
            
        elif command.startswith("/start_monitoring"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.monitoring_controller.is_user_monitoring(user_id):
                await self.send_message(chat_id, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤–∞—Å")
                return
                
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if user_id not in self.subscribers:
                self.subscribers.add(user_id)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞
            if not self.config.is_market_open():
                market_status = self.config.get_market_status_message()
                
                # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = {
                    "inline_keyboard": [[
                        {"text": "‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏", "callback_data": "start_when_open"},
                        {"text": "‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", "callback_data": "cancel_monitoring"}
                    ]]
                }
                
                message = f"""{market_status}

‚ùì –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±–∏—Ä–∂–∞?

‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (09:00-18:45 –ú–°–ö, –ü–Ω-–ü—Ç)"""
                
                await self.send_message_with_keyboard(chat_id, message, keyboard)
                return
            
            # –ë–∏—Ä–∂–∞ –æ—Ç–∫—Ä—ã—Ç–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitoring_controller.start_monitoring_for_user(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            user_settings = self.user_settings.get_user_settings(user_id)
            self.monitoring_scheduler.add_user_to_group(user_id, user_settings.monitoring_interval)
            
            await self.send_message(chat_id, f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ò–Ω—Ç–µ—Ä–≤–∞–ª: {user_settings.get_interval_display()}, –ø–æ—Ä–æ–≥: {user_settings.get_spread_display()}")
            
        elif command.startswith("/stop_monitoring"):
            if not self.monitoring_controller.is_user_monitoring(user_id):
                await self.send_message(chat_id, "‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return
                
            self.monitoring_controller.stop_monitoring_for_user(user_id)
            self.monitoring_scheduler.remove_user(user_id)
            await self.send_message(chat_id, "üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        elif command.startswith("/test"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤
            if hasattr(self, 'test_monitoring_active') and self.test_monitoring_active.get(user_id, False):
                await self.send_message(chat_id, "üî¥ –¢–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.test_monitoring_active[user_id] = False
                return
            
            if not hasattr(self, 'test_monitoring_active'):
                self.test_monitoring_active = {}
            
            self.test_monitoring_active[user_id] = True
            await self.send_message(chat_id, "üß™ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –≥–æ–ª—É–±—ã—Ö —Ñ–∏—à–µ–∫ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã\nüí¨ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: /test")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            asyncio.create_task(self._test_monitoring_task(user_id))
        

        elif command.startswith("/demo"):
            demo_message = """üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í

üü¢üü¢ –ê–†–ë–ò–¢–†–ê–ñ –°–ò–ì–ù–ê–õ

üéØ SBER/SiM5
üìä –°–ø—Ä–µ–¥: 3.25%

üíº –ü–æ–∑–∏—Ü–∏–∏:
üìà –ê–∫—Ü–∏–∏ SBER: –ö–£–ü–ò–¢–¨ 100 –ª–æ—Ç–æ–≤
üìä –§—å—é—á–µ—Ä—Å SiM5: –ü–†–û–î–ê–¢–¨ 1 –ª–æ—Ç

üí∞ –¶–µ–Ω—ã:
üìà SBER: 285.50 ‚ÇΩ
üìä SiM5: 294.78 ‚ÇΩ

‚è∞ –í—Ä–µ–º—è: 14:32:15

---

üîÑ –°–ò–ì–ù–ê–õ –ù–ê –ó–ê–ö–†–´–¢–ò–ï

üëã –î—Ä—É–∂–∏—â–µ, –ø–æ—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ GAZP/GZM5!

üìâ –°–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ: 0.3%

‚è∞ –í—Ä–µ–º—è: 16:45:22

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
            await self.send_message(chat_id, demo_message)
            

            
        elif command.startswith("/support"):
            support_message = f"""üÜò *–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ:

üì© –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {self.config.ADMIN_USERNAME}

ü§ñ –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å—é–¥–∞ –≤ –±–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º

‚ö° *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*
‚Ä¢ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? - /start_monitoring
‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤? - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /status –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂–∏
‚Ä¢ –ö–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? - /stop_monitoring

üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ /reconnect_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ /sources_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö

üïí –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤"""
            await self.send_message(chat_id, support_message)
            

            
        elif command.startswith("/reconnect_stats"):
            if self.source_reconnector and sources_library:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                reconnect_stats = await self.source_reconnector.get_reconnect_stats()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                library_stats = sources_library.get_library_stats()
                
                message = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:

üìö **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:**
üîó –í—Å–µ–≥–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {library_stats['total_sources']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {library_stats['active_sources']}
üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {library_stats['average_reliability']}%
üîÑ –ó–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {library_stats['replacement_count']}

üîß **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {reconnect_stats['working_sources']}
‚ùå –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ: {reconnect_stats['failed_sources']}

‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {reconnect_stats['last_check']}
üîÑ –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑: {reconnect_stats['next_check_in']}

üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –≤–æ –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤
üîÄ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (90 –º–∏–Ω—É—Ç)

‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
            else:
                message = "‚ùå –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                
            await self.send_message(chat_id, message)
            
        elif command.startswith("/sources_info"):
            if sources_library:
                active_sources = sources_library.get_active_sources_info()
                
                message = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**\n\n"
                
                for i, source in enumerate(active_sources, 1):
                    message += f"{i}. **{source['name']}**\n"
                    message += f"   üìä –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {source['reliability']}%\n"
                    message += f"   üîí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if source['requires_auth'] else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
                    message += f"   üìù {source['description']}\n\n"
                
                message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reconnect_stats –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            else:
                message = "‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                
            await self.send_message(chat_id, message)
            
        elif command.startswith("/settings"):
            settings_summary = self.user_settings.get_settings_summary(user_id)
            keyboard = self.user_settings.get_settings_keyboard(user_id)
            await self.send_message_with_keyboard(chat_id, settings_summary, keyboard)
            
        elif command.startswith("/menu"):
            welcome_text = """ü§ñ *MOEX Arbitrage Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

üéØ *–ë—ã—Å—Ç—Ä–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*"""
            
            main_menu_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_start_monitoring"},
                        {"text": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_stop_monitoring"}
                    ],
                    [
                        {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "cmd_settings"},
                        {"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "cmd_status"}
                    ],
                    [
                        {"text": "üìà –ò—Å—Ç–æ—Ä–∏—è", "callback_data": "cmd_history"},
                        {"text": "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "cmd_schedule"}
                    ],
                    [
                        {"text": "üéØ –î–µ–º–æ", "callback_data": "cmd_demo"},
                        {"text": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "cmd_support"}
                    ]
                ]
            }
            
            await self.send_message_with_keyboard(chat_id, welcome_text, main_menu_keyboard)
            
        elif command.startswith("/check_sources"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if user_id != self.monitoring_controller.get_admin_user_id():
                await self.send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                return
                
            await self.send_message(chat_id, "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            await self.data_sources.check_all_sources()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            summary = self.data_sources.get_status_summary()
            await self.send_message(chat_id, summary)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            for source_key, source in self.data_sources.sources.items():
                if source["status"] in ["blocked", "error", "unreachable"]:
                    keyboard = self.data_sources.get_restart_keyboard(source_key)
                    restart_message = f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {source['name']}?"
                    await self.send_message_with_keyboard(chat_id, restart_message, keyboard)
            
        elif command.startswith("/subscribe"):
            if user_id in self.subscribers:
                await self.send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            else:
                self.subscribers.add(user_id)
                await self.send_message(chat_id, "üîî –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
                
        elif command.startswith("/unsubscribe"):
            if user_id in self.subscribers:
                self.subscribers.remove(user_id)
                await self.send_message(chat_id, "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                await self.send_message(chat_id, "‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        elif not command.startswith("/") and user_id not in self.subscribers:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω)
            await self.handle_support_message(chat_id, user_id, command)
        else:
            await self.send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            
    async def handle_callback_query(self, callback_query: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        callback_data = callback_query.get("data", "")
        user_id = callback_query["from"]["id"]
        chat_id = callback_query["message"]["chat"]["id"]
        callback_query_id = callback_query["id"]
        
        if callback_data == "start_when_open":
            self.monitoring_controller.add_pending_market_open_user(user_id)
            await self.answer_callback_query(callback_query_id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∏—Ä–∂–∏")
            await self.send_message(chat_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±–∏—Ä–∂–∞")
            
        elif callback_data == "cancel_monitoring":
            await self.answer_callback_query(callback_query_id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
            await self.send_message(chat_id, "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_monitoring –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã")
            
        elif callback_data.startswith("restart_"):
            source_key = callback_data.replace("restart_", "")
            success = self.data_sources.restart_source(source_key)
            if success:
                source_name = self.data_sources.sources[source_key]["name"]
                await self.answer_callback_query(callback_query_id, f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {source_name}")
                await self.send_message(chat_id, f"üîÑ {source_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–ø–æ–ª–Ω—è—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                status = await self.data_sources.check_source_status(source_key)
                if status == "working":
                    await self.send_message(chat_id, f"‚úÖ {source_name} —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    await self.send_message(chat_id, f"‚ùå {source_name} –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                await self.answer_callback_query(callback_query_id, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                
        elif callback_data.startswith("cancel_restart_"):
            source_key = callback_data.replace("cancel_restart_", "")
            source_name = self.data_sources.sources[source_key]["name"]
            await self.answer_callback_query(callback_query_id, f"–û—Ç–º–µ–Ω–∞ –¥–ª—è {source_name}")
            await self.send_message(chat_id, f"‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {source_name} –æ—Ç–º–µ–Ω–µ–Ω")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data == "settings_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            welcome_text = """ü§ñ *MOEX Arbitrage Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

üéØ *–ë—ã—Å—Ç—Ä–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*"""
            
            main_menu_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_start_monitoring"},
                        {"text": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_stop_monitoring"}
                    ],
                    [
                        {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "cmd_settings"},
                        {"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "cmd_status"}
                    ],
                    [
                        {"text": "üìà –ò—Å—Ç–æ—Ä–∏—è", "callback_data": "cmd_history"},
                        {"text": "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "cmd_schedule"}
                    ],
                    [
                        {"text": "üéØ –î–µ–º–æ", "callback_data": "cmd_demo"},
                        {"text": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "cmd_support"}
                    ]
                ]
            }
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], welcome_text, main_menu_keyboard)
            await self.answer_callback_query(callback_query_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
        elif callback_data == "settings_interval":
            keyboard = self.user_settings.get_interval_keyboard()
            message = "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–æ—Ç–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], message, keyboard)
            await self.answer_callback_query(callback_query_id, "–ò–Ω—Ç–µ—Ä–≤–∞–ª")
            
        elif callback_data == "settings_spread":
            keyboard = self.user_settings.get_spread_keyboard()
            message = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], message, keyboard)
            await self.answer_callback_query(callback_query_id, "–°–ø—Ä–µ–¥")
            
        elif callback_data == "settings_signals":
            keyboard = self.user_settings.get_signals_keyboard()
            message = "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑:\n\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏: 3 —Å–µ–∫—É–Ω–¥—ã"
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], message, keyboard)
            await self.answer_callback_query(callback_query_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        elif callback_data.startswith("interval_"):
            interval = int(callback_data.replace("interval_", ""))
            if self.user_settings.update_monitoring_interval(user_id, interval):
                settings = self.user_settings.get_user_settings(user_id)
                await self.answer_callback_query(callback_query_id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.get_interval_display()}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
                if self.monitoring_controller.is_user_monitoring(user_id):
                    self.monitoring_scheduler.add_user_to_group(user_id, settings.monitoring_interval)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_user_settings_to_db(user_id)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_summary = self.user_settings.get_settings_summary(user_id)
                keyboard = self.user_settings.get_settings_keyboard(user_id)
                await self.edit_message_text(chat_id, callback_query["message"]["message_id"], settings_summary, keyboard)
            else:
                await self.answer_callback_query(callback_query_id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        elif callback_data.startswith("spread_"):
            spread = float(callback_data.replace("spread_", ""))
            if self.user_settings.update_spread_threshold(user_id, spread):
                settings = self.user_settings.get_user_settings(user_id)
                await self.answer_callback_query(callback_query_id, f"–°–ø—Ä–µ–¥: {settings.get_spread_display()}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_user_settings_to_db(user_id)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_summary = self.user_settings.get_settings_summary(user_id)
                keyboard = self.user_settings.get_settings_keyboard(user_id)
                await self.edit_message_text(chat_id, callback_query["message"]["message_id"], settings_summary, keyboard)
            else:
                await self.answer_callback_query(callback_query_id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        elif callback_data.startswith("signals_"):
            max_signals = int(callback_data.replace("signals_", ""))
            if self.user_settings.update_max_signals(user_id, max_signals):
                settings = self.user_settings.get_user_settings(user_id)
                await self.answer_callback_query(callback_query_id, f"–°–∏–≥–Ω–∞–ª–æ–≤: {settings.max_signals}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                user_max_signals = settings.max_signals
                self.signal_queue.max_signals_per_batch = user_max_signals
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_user_settings_to_db(user_id)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_summary = self.user_settings.get_settings_summary(user_id)
                keyboard = self.user_settings.get_settings_keyboard(user_id)
                await self.edit_message_text(chat_id, callback_query["message"]["message_id"], settings_summary, keyboard)
            else:
                await self.answer_callback_query(callback_query_id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        elif callback_data == "show_main_menu":
            welcome_text = """ü§ñ *MOEX Arbitrage Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

üéØ *–ë—ã—Å—Ç—Ä–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*"""
            
            main_menu_keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_start_monitoring"},
                        {"text": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "cmd_stop_monitoring"}
                    ],
                    [
                        {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "cmd_settings"},
                        {"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "cmd_status"}
                    ],
                    [
                        {"text": "üìà –ò—Å—Ç–æ—Ä–∏—è", "callback_data": "cmd_history"},
                        {"text": "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "cmd_schedule"}
                    ],
                    [
                        {"text": "üéØ –î–µ–º–æ", "callback_data": "cmd_demo"},
                        {"text": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "cmd_support"}
                    ]
                ]
            }
            
            await self.send_message_with_keyboard(chat_id, welcome_text, main_menu_keyboard)
            await self.answer_callback_query(callback_query_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
        elif callback_data == "cmd_settings":
            settings_summary = self.user_settings.get_settings_summary(user_id)
            keyboard = self.user_settings.get_settings_keyboard(user_id)
            await self.send_message_with_keyboard(chat_id, settings_summary, keyboard)
            await self.answer_callback_query(callback_query_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
        elif callback_data == "cmd_start_monitoring":
            await self.handle_command(chat_id, "/start_monitoring", user_id)
            await self.answer_callback_query(callback_query_id, "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
        elif callback_data == "cmd_stop_monitoring":
            await self.handle_command(chat_id, "/stop_monitoring", user_id)
            await self.answer_callback_query(callback_query_id, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
        elif callback_data == "cmd_status":
            await self.handle_command(chat_id, "/status", user_id)
            await self.answer_callback_query(callback_query_id, "–°—Ç–∞—Ç—É—Å")
            
        elif callback_data == "cmd_history":
            await self.handle_command(chat_id, "/history", user_id)
            await self.answer_callback_query(callback_query_id, "–ò—Å—Ç–æ—Ä–∏—è")
            
        elif callback_data == "cmd_schedule":
            await self.handle_command(chat_id, "/schedule", user_id)
            await self.answer_callback_query(callback_query_id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            
        elif callback_data == "cmd_demo":
            await self.handle_command(chat_id, "/demo", user_id)
            await self.answer_callback_query(callback_query_id, "–î–µ–º–æ")
            
        elif callback_data == "cmd_support":
            await self.handle_command(chat_id, "/support", user_id)
            await self.answer_callback_query(callback_query_id, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        elif callback_data == "settings_instruments":
            keyboard = self.user_settings.get_instruments_keyboard(user_id, self.config.MONITORED_INSTRUMENTS)
            instruments_text = f"""üìà *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

üéØ *–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(self.config.MONITORED_INSTRUMENTS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä*

üìä *–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:*
–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è  
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], instruments_text, keyboard)
            await self.answer_callback_query(callback_query_id, "–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
        elif callback_data.startswith("instrument_add_"):
            # –§–æ—Ä–º–∞—Ç: instrument_add_{sector_hash}_{instrument}
            parts = callback_data.replace("instrument_add_", "").split("_", 1)
            if len(parts) == 2:
                sector_hash, instrument = parts
                sector_hash = int(sector_hash)
                sector_name = self.user_settings.get_sector_name_by_hash(sector_hash, self.config.MONITORED_INSTRUMENTS)
                
                success = self.user_settings.add_user_instrument(user_id, instrument)
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    await self._save_user_settings_to_db(user_id)
                    
                    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–µ–∫—Ç–æ—Ä–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–µ–∫—Ç–æ—Ä–∞
                    keyboard = self.user_settings.get_sector_instruments_keyboard(user_id, sector_name, self.config.MONITORED_INSTRUMENTS)
                    sector_text = f"""üìä *{sector_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
–õ–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                    
                    await self.edit_message_text(chat_id, callback_query["message"]["message_id"], sector_text, keyboard)
                    await self.answer_callback_query(callback_query_id, f"‚úÖ {instrument} –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    await self.answer_callback_query(callback_query_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                instrument = callback_data.replace("instrument_add_", "")
                success = self.user_settings.add_user_instrument(user_id, instrument)
                
                if success:
                    await self._save_user_settings_to_db(user_id)
                    keyboard = self.user_settings.get_instruments_keyboard(user_id, self.config.MONITORED_INSTRUMENTS)
                    instruments_text = f"""üìà *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"""
                    
                    await self.edit_message_text(chat_id, callback_query["message"]["message_id"], instruments_text, keyboard)
                    await self.answer_callback_query(callback_query_id, f"‚úÖ {instrument} –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    await self.answer_callback_query(callback_query_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                
        elif callback_data.startswith("instrument_remove_"):
            # –§–æ—Ä–º–∞—Ç: instrument_remove_{sector_hash}_{instrument}
            parts = callback_data.replace("instrument_remove_", "").split("_", 1)
            if len(parts) == 2:
                sector_hash, instrument = parts
                sector_hash = int(sector_hash)
                sector_name = self.user_settings.get_sector_name_by_hash(sector_hash, self.config.MONITORED_INSTRUMENTS)
                
                success = self.user_settings.remove_user_instrument(user_id, instrument)
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    await self._save_user_settings_to_db(user_id)
                    
                    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–µ–∫—Ç–æ—Ä–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–µ–∫—Ç–æ—Ä–∞
                    keyboard = self.user_settings.get_sector_instruments_keyboard(user_id, sector_name, self.config.MONITORED_INSTRUMENTS)
                    sector_text = f"""üìä *{sector_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
–õ–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                    
                    await self.edit_message_text(chat_id, callback_query["message"]["message_id"], sector_text, keyboard)
                    await self.answer_callback_query(callback_query_id, f"‚ùå {instrument} —É–¥–∞–ª–µ–Ω")
                else:
                    await self.answer_callback_query(callback_query_id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                instrument = callback_data.replace("instrument_remove_", "")
                success = self.user_settings.remove_user_instrument(user_id, instrument)
                
                if success:
                    await self._save_user_settings_to_db(user_id)
                    keyboard = self.user_settings.get_instruments_keyboard(user_id, self.config.MONITORED_INSTRUMENTS)
                    instruments_text = f"""üìà *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"""
                    
                    await self.edit_message_text(chat_id, callback_query["message"]["message_id"], instruments_text, keyboard)
                    await self.answer_callback_query(callback_query_id, f"‚ùå {instrument} —É–¥–∞–ª–µ–Ω")
                else:
                    await self.answer_callback_query(callback_query_id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
        elif callback_data == "instruments_clear":
            self.user_settings.clear_user_instruments(user_id)
            await self._save_user_settings_to_db(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.user_settings.get_instruments_keyboard(user_id, self.config.MONITORED_INSTRUMENTS)
            instruments_text = f"""üìà *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], instruments_text, keyboard)
            await self.answer_callback_query(callback_query_id, "üîÑ –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω")
            
        elif callback_data == "instruments_default":
            self.user_settings.set_default_instruments(user_id, self.config.MONITORED_INSTRUMENTS)
            await self._save_user_settings_to_db(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.user_settings.get_instruments_keyboard(user_id, self.config.MONITORED_INSTRUMENTS)
            instruments_text = f"""üìà *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], instruments_text, keyboard)
            await self.answer_callback_query(callback_query_id, "üéØ –í—ã–±—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤
        elif callback_data.startswith("sector_"):
            sector_hash = int(callback_data.replace("sector_", ""))
            sector_name = self.user_settings.get_sector_name_by_hash(sector_hash, self.config.MONITORED_INSTRUMENTS)
            
            keyboard = self.user_settings.get_sector_instruments_keyboard(user_id, sector_name, self.config.MONITORED_INSTRUMENTS)
            sector_text = f"""üìä *{sector_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
–õ–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], sector_text, keyboard)
            await self.answer_callback_query(callback_query_id, f"–°–µ–∫—Ç–æ—Ä: {sector_name}")
            
        elif callback_data == "instruments_back_to_sectors":
            keyboard = self.user_settings.get_instruments_keyboard(user_id, self.config.MONITORED_INSTRUMENTS)
            instruments_text = f"""üìà *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

üéØ *–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(self.config.MONITORED_INSTRUMENTS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä*

üìä *–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:*
–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è  
‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], instruments_text, keyboard)
            await self.answer_callback_query(callback_query_id, "–ö —Å–µ–∫—Ç–æ—Ä–∞–º")
            
        elif callback_data.startswith("sector_select_all_"):
            sector_hash = int(callback_data.replace("sector_select_all_", ""))
            sector_name = self.user_settings.get_sector_name_by_hash(sector_hash, self.config.MONITORED_INSTRUMENTS)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–µ–∫—Ç–æ—Ä–∞ (—Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞)
            sectors = self.user_settings._group_instruments_by_sectors(self.config.MONITORED_INSTRUMENTS)
            sector_instruments = sectors.get(sector_name, {})
            
            added_count = 0
            for stock in sector_instruments.keys():
                if self.user_settings.add_user_instrument(user_id, stock):
                    added_count += 1
            
            if added_count > 0:
                await self._save_user_settings_to_db(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.user_settings.get_sector_instruments_keyboard(user_id, sector_name, self.config.MONITORED_INSTRUMENTS)
            sector_text = f"""üìä *{sector_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
–õ–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], sector_text, keyboard)
            await self.answer_callback_query(callback_query_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")
            
        elif callback_data.startswith("sector_clear_all_"):
            sector_hash = int(callback_data.replace("sector_clear_all_", ""))
            sector_name = self.user_settings.get_sector_name_by_hash(sector_hash, self.config.MONITORED_INSTRUMENTS)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–µ–∫—Ç–æ—Ä–∞
            sectors = self.user_settings._group_instruments_by_sectors(self.config.MONITORED_INSTRUMENTS)
            sector_instruments = sectors.get(sector_name, {})
            
            removed_count = 0
            for stock in sector_instruments.keys():
                if self.user_settings.remove_user_instrument(user_id, stock):
                    removed_count += 1
            
            if removed_count > 0:
                await self._save_user_settings_to_db(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.user_settings.get_sector_instruments_keyboard(user_id, sector_name, self.config.MONITORED_INSTRUMENTS)
            sector_text = f"""üìä *{sector_name}*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

‚úÖ = –≤—ã–±—Ä–∞–Ω–æ, ‚≠ï = –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
–õ–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            
            await self.edit_message_text(chat_id, callback_query["message"]["message_id"], sector_text, keyboard)
            await self.answer_callback_query(callback_query_id, f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {removed_count}")
    
    async def _restore_user_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            monitoring_users = await db.get_all_monitoring_users()
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {len(monitoring_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            for db_settings in monitoring_users:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                user_settings = self.user_settings.get_user_settings(db_settings.user_id)
                user_settings.monitoring_interval = db_settings.monitoring_interval
                user_settings.spread_threshold = db_settings.spread_threshold
                user_settings.max_signals = db_settings.max_signals
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(db_settings, 'selected_instruments') and db_settings.selected_instruments:
                    try:
                        import json
                        user_settings.selected_instruments = json.loads(db_settings.selected_instruments)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_settings.user_id}: {e}")
                        user_settings.selected_instruments = []
                
                # –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–º
                if db_settings.is_monitoring:
                    # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                    from database import UserSettings as DBUserSettings
                    import json
                    
                    db_user_settings = DBUserSettings(
                        user_id=db_settings.user_id,
                        monitoring_interval=user_settings.monitoring_interval,
                        spread_threshold=user_settings.spread_threshold,
                        max_signals=user_settings.max_signals,
                        is_monitoring=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        selected_instruments=json.dumps(user_settings.selected_instruments)
                    )
                    await db.save_user_settings(db_user_settings)
                    logger.info(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_settings.user_id} —Å–±—Ä–æ—à–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫")
            
            if monitoring_users:
                logger.info("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    async def _save_all_user_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for user_id, settings in self.user_settings.user_settings.items():
                from database import UserSettings as DBUserSettings
                import json
                
                db_settings = DBUserSettings(
                    user_id=user_id,
                    monitoring_interval=settings.monitoring_interval,
                    spread_threshold=settings.spread_threshold,
                    max_signals=settings.max_signals,
                    is_monitoring=self.monitoring_controller.is_user_monitoring(user_id),
                    selected_instruments=json.dumps(settings.selected_instruments)
                )
                await db.save_user_settings(db_settings)
            
            logger.info("üíæ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    async def _save_user_settings_to_db(self, user_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            settings = self.user_settings.get_user_settings(user_id)
            from database import UserSettings as DBUserSettings
            import json
            
            db_settings = DBUserSettings(
                user_id=user_id,
                monitoring_interval=settings.monitoring_interval,
                spread_threshold=settings.spread_threshold,
                max_signals=settings.max_signals,
                is_monitoring=self.monitoring_controller.is_user_monitoring(user_id),
                selected_instruments=json.dumps(settings.selected_instruments)
            )
            await db.save_user_settings(db_settings)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    async def handle_support_message(self, chat_id: int, user_id: int, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        admin_id = self.monitoring_controller.get_admin_user_id()
        if admin_id:
            support_notification = f"""üì© *–°–û–û–ë–©–ï–ù–ò–ï –ü–û–î–î–ï–†–ñ–ö–ò*

üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
            await self.send_message(admin_id, support_notification)
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.send_message(chat_id, "üì© –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
        
    async def notify_admin_error(self, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ"""
        admin_id = self.monitoring_controller.get_admin_user_id()
        if admin_id:
            error_notification = f"""üö® *–û–®–ò–ë–ö–ê –ë–û–¢–ê*

‚ö†Ô∏è {error_message}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"""
            await self.send_message(admin_id, error_notification)
    
    async def send_arbitrage_signal(self, signal, target_users=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if signal.action == "OPEN":
            emoji = "üü¢üü¢" if signal.urgency_level == 3 else "üü¢" if signal.urgency_level == 2 else "üìà"
            
            message = f"{emoji} *–ê–†–ë–ò–¢–†–ê–ñ –°–ò–ì–ù–ê–õ*\n\n"
            message += f"üéØ *{signal.stock_ticker}/{signal.futures_ticker}*\n"
            message += f"üìä –°–ø—Ä–µ–¥: *{signal.spread_percent:.2f}%*\n\n"
            message += f"üíº *–ü–æ–∑–∏—Ü–∏–∏:*\n"
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
            stock_emoji = "üü¢‚¨ÜÔ∏è" if signal.stock_position == "BUY" else "üî¥‚¨áÔ∏è"
            futures_emoji = "üü¢‚¨ÜÔ∏è" if signal.futures_position == "BUY" else "üî¥‚¨áÔ∏è"
            
            message += f"üìà –ê–∫—Ü–∏–∏ {signal.stock_ticker}: *{signal.stock_position}* {stock_emoji}\n"
            message += f"üìä –§—å—é—á–µ—Ä—Å {signal.futures_ticker}: *{signal.futures_position}* {futures_emoji}\n\n"
            message += f"üí∞ *–¶–µ–Ω—ã:*\n"
            message += f"üìà {signal.stock_ticker}: {signal.stock_price:.2f} ‚ÇΩ\n"
            message += f"üìä {signal.futures_ticker}: {signal.futures_price:.2f} ‚ÇΩ\n\n"
            

            
            message += f"‚è∞ –í—Ä–µ–º—è: {signal.timestamp}"
            
        else:  # CLOSE
            message = "üîÑ *–°–ò–ì–ù–ê–õ –ù–ê –ó–ê–ö–†–´–¢–ò–ï*\n\n"
            message += f"üëã –î—Ä—É–∂–∏—â–µ, –ø–æ—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ *{signal.stock_ticker}/{signal.futures_ticker}*!\n\n"
            message += f"üìâ –°–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ: *{signal.spread_percent:.2f}%*\n\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {signal.timestamp}"
        
        # –ï—Å–ª–∏ target_users –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        if target_users is None:
            target_users = []
            for subscriber_id in self.subscribers.copy():
                user_settings = self.user_settings.get_user_settings(subscriber_id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if signal.spread_percent >= user_settings.spread_threshold:
                    target_users.append(subscriber_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        failed_subscribers = []
        for subscriber_id in target_users:
            success = await self.send_message(subscriber_id, message)
            if not success:
                failed_subscribers.append(subscriber_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for failed_id in failed_subscribers:
            self.subscribers.discard(failed_id)
    
    async def monitoring_cycle_for_interval(self, interval_seconds: int, target_users: List[int]):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {interval_seconds}—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(target_users)}")
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
            if interval_seconds < 300:  # –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
                total_sources = len([s for s in self.data_sources.sources.values() if s["status"] == "working"])
                if total_sources > 0:
                    source_index, completed_cycle = self.monitoring_scheduler.get_next_source_for_interval(interval_seconds, total_sources)
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ #{source_index} –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {interval_seconds}—Å")
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ - –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                    if completed_cycle:
                        import random
                        pause_seconds = random.randint(300, 420)  # 5-7 –º–∏–Ω—É—Ç
                        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è {interval_seconds}—Å. –ü–∞—É–∑–∞ {pause_seconds}—Å")
                        await asyncio.sleep(pause_seconds)
                        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            all_user_instruments = {}
            for user_id in target_users:
                user_instruments = self.user_settings.get_user_instruments_dict(user_id, self.config.MONITORED_INSTRUMENTS)
                all_user_instruments.update(user_instruments)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            instruments_to_monitor = all_user_instruments if all_user_instruments else self.config.MONITORED_INSTRUMENTS
            
            async with MOEXAPIClient() as moex_client:
                quotes = await moex_client.get_multiple_quotes(instruments_to_monitor)
            
            if not quotes:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            import pytz
            moscow_tz = pytz.timezone('Europe/Moscow')
            moscow_time = datetime.now(moscow_tz)
            current_time = moscow_time.strftime("%H:%M:%S")
            signals = []
            
            for stock_ticker, (stock_price, futures_price) in quotes.items():
                if stock_price is None or futures_price is None:
                    continue
                
                futures_ticker = instruments_to_monitor[stock_ticker]
                # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                min_threshold = self._get_minimum_spread_threshold(target_users)
                
                signal = self.calculator.analyze_arbitrage_opportunity(
                    stock_ticker=stock_ticker,
                    futures_ticker=futures_ticker,
                    stock_price=stock_price,
                    futures_price=futures_price,
                    timestamp=current_time,
                    min_spread_threshold=min_threshold
                )
                
                if signal:
                    signals.append(signal)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–ø—Ä–µ–¥–æ–≤
                    self.spread_history.add_record(
                        stock_ticker=signal.stock_ticker,
                        futures_ticker=signal.futures_ticker,
                        spread=signal.spread_percent,
                        signal_type=signal.action
                    )
                    
                    if signal.action == "OPEN":
                        self.calculator.register_position(signal)
                    elif signal.action == "CLOSE":
                        self.calculator.close_position(signal)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            if signals:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø—Ä–µ–¥–∞
                filtered_signals = []
                for signal in signals:
                    filtered_users = []
                    for user_id in target_users:
                        user_settings = self.user_settings.get_user_settings(user_id)
                        user_instruments = self.user_settings.get_user_instruments_dict(user_id, self.config.MONITORED_INSTRUMENTS)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ —Å–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –µ–≥–æ –ø–æ—Ä–æ–≥
                        if (signal.stock_ticker in user_instruments and 
                            signal.spread_percent >= user_settings.spread_threshold):
                            filtered_users.append(user_id)
                    
                    if filtered_users:
                        filtered_signals.append((signal, filtered_users))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å
                if filtered_signals:
                    for signal, users in filtered_signals[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–∏–≥–Ω–∞–ª–æ–≤
                        await self.send_arbitrage_signal(signal, users)
                        if len(filtered_signals) > 1:
                            await asyncio.sleep(3)  # 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {interval_seconds}—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {interval_seconds}—Å: {e}")
    
    def _get_minimum_spread_threshold(self, target_users: List[int]) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ —Å—Ä–µ–¥–∏ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        min_threshold = float('inf')
        
        for user_id in target_users:
            user_settings = self.user_settings.get_user_settings(user_id)
            if user_settings.spread_threshold < min_threshold:
                min_threshold = user_settings.spread_threshold
        
        return min_threshold if min_threshold != float('inf') else 0.2
            
    async def smart_monitoring_cycle(self):
        """–£–º–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.monitoring_controller.should_run_global_monitoring():
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
        intervals_to_monitor = self.monitoring_scheduler.get_groups_to_monitor()
        
        if not intervals_to_monitor:
            return
            
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {intervals_to_monitor}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for interval in intervals_to_monitor:
            target_users = self.monitoring_scheduler.get_users_for_interval(interval)
            if target_users:
                task = asyncio.create_task(
                    self.monitoring_cycle_for_interval(interval, list(target_users))
                )
                tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
    
    async def _test_monitoring_task(self, user_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–æ–≤"""
        logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        iteration = 0
        
        while self.test_monitoring_active.get(user_id, False):
            try:
                iteration += 1
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_instruments = self.user_settings.get_user_instruments_dict(user_id, self.config.MONITORED_INSTRUMENTS)
                instruments_to_test = user_instruments if user_instruments else self.config.MONITORED_INSTRUMENTS
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ MOEX API (—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π)
                async with MOEXAPIClient() as moex_client:
                    quotes = await moex_client.get_multiple_quotes(instruments_to_test)
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫: {len(quotes) if quotes else 0}")
                
                if not quotes:
                    await self.send_message(user_id, "‚ö†Ô∏è –¢–µ—Å—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç MOEX API")
                    await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–ø—Ä–µ–¥–∞–º–∏
                test_message = "üß™ **–¢–ï–°–¢–û–í–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ü–†–ï–î–û–í**\n\n"
                test_message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
                test_message += f"üìä API –æ—Ç–≤–µ—Ç: {len(quotes)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
                test_message += f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è: {iteration}\n\n"
                
                spread_found = False
                pair_count = 0
                processed_pairs = []
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –ø–∞—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5)
                for stock_ticker, quote_data in quotes.items():
                    if pair_count >= 15:  # –£–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç –¥–æ 15 –ø–∞—Ä
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if not isinstance(quote_data, (list, tuple)) or len(quote_data) != 2:
                        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {stock_ticker}: {quote_data}")
                        continue
                        
                    stock_price, futures_price = quote_data
                    
                    if stock_price is None or futures_price is None or stock_price <= 0 or futures_price <= 0:
                        logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {stock_ticker}: —Å–ø–æ—Ç={stock_price}, —Ñ—å—é—á–µ—Ä—Å={futures_price}")
                        continue
                    
                    futures_ticker = instruments_to_test.get(stock_ticker)
                    if not futures_ticker:
                        logger.debug(f"–ù–µ—Ç —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è {stock_ticker}")
                        continue
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞ —á–µ—Ä–µ–∑ ArbitrageCalculator
                    try:
                        user_settings = self.user_settings.get_user_settings(user_id)
                        signal = self.calculator.analyze_arbitrage_opportunity(
                            stock_ticker=stock_ticker,
                            futures_ticker=futures_ticker,
                            stock_price=stock_price,
                            futures_price=futures_price,
                            timestamp=datetime.now().strftime('%H:%M:%S'),
                            min_spread_threshold=0.1  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Å—Ç–µ
                        )
                        
                        if signal:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
                            spread = signal.spread_percent
                            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–∞ (–æ–Ω–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
                            display_stock_price = signal.stock_price
                            display_futures_price = signal.futures_price
                        else:
                            # –ü—Ä—è–º–æ–π —Ä–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞ –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏ –±–µ–∑ –ª–æ—Ç–Ω–æ—Å—Ç–∏ (–¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É)
                            spread = ((futures_price - stock_price) / stock_price) * 100
                            display_stock_price = stock_price
                            display_futures_price = futures_price
                        
                        logger.debug(f"–°–ø—Ä–µ–¥ –¥–ª—è {stock_ticker}/{futures_ticker}: {spread:.4f}%")
                        
                        spread_found = True
                        pair_count += 1
                        processed_pairs.append(stock_ticker)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø—Ä–µ–¥–∞
                        if abs(spread) >= 3.0:
                            emoji = "üü¢üü¢"
                        elif abs(spread) >= 1.5:
                            emoji = "üü¢"
                        else:
                            emoji = "üìä"
                        
                        test_message += f"{emoji} **{stock_ticker}/{futures_ticker}**\n"
                        test_message += f"   –°–ø—Ä–µ–¥: **{spread:.4f}%**\n"
                        test_message += f"   –ê–∫—Ü–∏—è: {display_stock_price:.2f} ‚ÇΩ\n"
                        test_message += f"   –§—å—é—á–µ—Ä—Å: {display_futures_price:.2f} ‚ÇΩ\n\n"
                        
                    except Exception as calc_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ø—Ä–µ–¥–∞ –¥–ª—è {stock_ticker}: {calc_error}")
                        continue
                
                if not spread_found:
                    test_message += f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø—Ä–µ–¥–∞–º\n"
                    test_message += f"üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä: {processed_pairs}\n"
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    sample_data = dict(list(quotes.items())[:3])
                    test_message += f"üìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö: {sample_data}\n"
                
                test_message += "üí¨ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: /test"
                
                await self.send_message(user_id, test_message)
                
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                delay = 120  # 2 –º–∏–Ω—É—Ç—ã
                logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
                
            except Exception as e:
                error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}"
                await self.send_message(user_id, error_msg)
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
        sources_status = await self.data_sources.check_all_sources()
        
        for source_key, status in sources_status.items():
            source_name = self.data_sources.sources[source_key]["name"]
            if status == "working":
                logger.info(f"‚úÖ {source_name}: —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ")
            elif status == "blocked":
                logger.warning(f"üö´ {source_name}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            elif status == "error":
                logger.error(f"‚ùå {source_name}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            elif status == "unreachable":
                logger.warning(f"üì° {source_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.info(f"‚ùì {source_name}: –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        
        working_sources = [key for key, status in sources_status.items() if status == "working"]
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(working_sources)}/{len(sources_status)}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        async def monitoring_task():
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if not self.monitoring_controller.should_run_global_monitoring():
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    # –≤–º–µ—Å—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Ü–∏–∫–ª–µ
                    await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –±–∏—Ä–∂–∞
                if not self.config.is_market_open():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è
                    pending_users = self.monitoring_controller.get_pending_market_open_users()
                    if pending_users:
                        logger.info(f"–ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞. {len(pending_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è...")
                    
                    await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    continue
                
                # –ë–∏—Ä–∂–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å - —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                pending_users = self.monitoring_controller.get_pending_market_open_users()
                for user_id in pending_users:
                    self.monitoring_controller.start_monitoring_for_user(user_id)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                    user_settings = self.user_settings.get_user_settings(user_id)
                    self.monitoring_scheduler.add_user_to_group(user_id, user_settings.monitoring_interval)
                    
                    self.monitoring_controller.remove_pending_market_open_user(user_id)
                    await self.send_message(user_id, f"üü¢ –ë–∏—Ä–∂–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {user_settings.get_interval_display()}")
                
                # –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–æ–π –±–∏—Ä–∂–µ
                self.monitoring_controller.clear_market_closed_notifications()
                
                # –ü–†–û–í–ï–†–Ø–ï–ú –ï–©–ï –†–ê–ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if not self.monitoring_controller.should_run_global_monitoring():
                    continue
                    
                try:
                    await self.smart_monitoring_cycle()
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}"
                    logger.error(error_msg)
                    await self.notify_admin_error(error_msg)
                    
                # –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        monitor_task = asyncio.create_task(monitoring_task())
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            while True:
                updates = await self.get_updates()
                
                for update in updates:
                    if update.message:
                        chat_id = update.message["chat"]["id"]
                        user_id = update.message["from"]["id"]
                        text = update.message.get("text", "")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –Ω–µ–≥–æ
                        username = update.message["from"].get("username", "")
                        if username == "Ildaryakupovv" and not self.monitoring_controller.get_admin_user_id():
                            self.monitoring_controller.set_admin_user_id(user_id)
                            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_id}")
                        
                        if text.startswith("/"):
                            await self.handle_command(chat_id, text, user_id)
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            await self.send_message(chat_id, "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
                            
                    elif update.callback_query:
                        await self.handle_callback_query(update.callback_query)
                
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
            await self.notify_admin_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            monitor_task.cancel()
            try:
                await monitor_task
            except asyncio.CancelledError:
                pass
            
    async def daily_validation_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
                if self.daily_validator.should_run_validation():
                    logger.info("üîç –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥–æ–ª—É–±—ã—Ö —Ñ–∏—à–µ–∫
                    results = await self.daily_validator.run_validation()
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    valid_count = sum(1 for r in results.values() if r.is_valid)
                    invalid_count = len(results) - valid_count
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    if invalid_count > 0:
                        admin_id = self.monitoring_controller.get_admin_user_id()
                        if admin_id:
                            error_message = f"""üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–û–†–ì–û–í–´–ï –ü–ê–†–´
                            
‚ö†Ô∏è –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–∞—Ä: {invalid_count} –∏–∑ {len(results)}

üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MONITORED_INSTRUMENTS

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"""
                            await self.send_message(admin_id, error_message)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä: {e}")
                await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def get_tradingview_link(self, ticker: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ TradingView –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è TradingView
        tv_mapping = {
            "SBER": "MOEX:SBER",
            "GAZP": "MOEX:GAZP", 
            "LKOH": "MOEX:LKOH",
            "VTBR": "MOEX:VTBR",
            "YNDX": "NASDAQ:YNDX",
            "TCSG": "MOEX:TCSG",
            "ROSN": "MOEX:ROSN",
            "GMKN": "MOEX:GMKN",
            "PLZL": "MOEX:PLZL",
            "MGNT": "MOEX:MGNT",
            "SNGS": "MOEX:SNGS",
            "ALRS": "MOEX:ALRS",
            "TATN": "MOEX:TATN",
            "MTSS": "MOEX:MTSS"
        }
        
        tv_symbol = tv_mapping.get(ticker, f"MOEX:{ticker}")
        return f"https://www.tradingview.com/chart/?symbol={tv_symbol}"

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    class MoscowFormatter(logging.Formatter):
        def formatTime(self, record, datefmt=None):
            dt = datetime.fromtimestamp(record.created, tz=moscow_tz)
            if datefmt:
                return dt.strftime(datefmt)
            else:
                return dt.strftime('%Y-%m-%d %H:%M:%S,%f')[:-3]
    
    formatter = MoscowFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    
    logging.basicConfig(
        level=logging.INFO,
        handlers=[handler]
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    async with SimpleTelegramBot(token) as bot:
        await bot.run()

if __name__ == "__main__":
    asyncio.run(main())