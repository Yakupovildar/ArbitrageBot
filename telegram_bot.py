#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ MOEX –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è python-telegram-bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram Bot API
"""

import os
import asyncio
import aiohttp
import json
import logging
from datetime import datetime, timezone
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
from config import Config
from moex_api import MOEXAPIClient
from arbitrage_calculator import ArbitrageCalculator

logger = logging.getLogger(__name__)

@dataclass
class TelegramUpdate:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è Telegram update"""
    update_id: int
    message: Optional[Dict] = None
    
class SimpleTelegramBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç —á–µ—Ä–µ–∑ HTTP API"""
    
    def __init__(self, token: str):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.session = None
        self.offset = 0
        self.subscribers: Set[int] = set()
        self.config = Config()
        self.calculator = ArbitrageCalculator()
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.session:
            return False
            
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def get_updates(self) -> List[TelegramUpdate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not self.session:
            return []
            
        url = f"{self.base_url}/getUpdates"
        params = {
            "offset": self.offset,
            "timeout": 10
        }
        
        try:
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    updates = []
                    
                    for update_data in data.get("result", []):
                        update = TelegramUpdate(
                            update_id=update_data["update_id"],
                            message=update_data.get("message")
                        )
                        updates.append(update)
                        self.offset = max(self.offset, update_data["update_id"] + 1)
                    
                    return updates
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                    return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def handle_command(self, chat_id: int, command: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        
        if command.startswith("/start"):
            welcome_text = """ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ MOEX!*

–≠—Ç–æ—Ç –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É –∞–∫—Ü–∏—è–º–∏ –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ.

üìä *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ —Å–ø—Ä–µ–¥–µ > 1%
‚Ä¢ –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ø—Ä–µ–¥–∞
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π

üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/status - —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞  
/positions - –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –°–∏–≥–Ω–∞–ª—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä."""
            await self.send_message(chat_id, welcome_text)
            
        elif command.startswith("/help"):
            help_text = """üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/positions - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üîç *–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã:*
üìà SBER/SiM5 | –°–ø—Ä–µ–¥: 2.5%
üí∞ –ê–∫—Ü–∏–∏: –ö–£–ü–ò–¢–¨ 100 –ª–æ—Ç–æ–≤
üìä –§—å—é—á–µ—Ä—Å: –ü–†–û–î–ê–¢–¨ 1 –ª–æ—Ç

‚ö° *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç*"""
            await self.send_message(chat_id, help_text)
            
        elif command.startswith("/status"):
            status_text = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:*

üîå MOEX API: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω
üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_id in self.subscribers else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"}
üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.calculator.open_positions)}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config.MONITORING_INTERVAL // 60} –º–∏–Ω"""
            await self.send_message(chat_id, status_text)
            
        elif command.startswith("/positions"):
            positions = self.calculator.get_open_positions_summary()
            if not positions:
                await self.send_message(chat_id, "üìã *–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            else:
                message = "üìã *–û—Ç–∫—Ä—ã—Ç—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
                for i, pos in enumerate(positions, 1):
                    message += f"*{i}. {pos['stock_ticker']}/{pos['futures_ticker']}*\n"
                    message += f"üìà –ê–∫—Ü–∏–∏: {pos['stock_position']} {pos['stock_lots']} –ª–æ—Ç–æ–≤\n"
                    message += f"üìä –§—å—é—á–µ—Ä—Å: {pos['futures_position']} {pos['futures_lots']} –ª–æ—Ç–æ–≤\n"
                    message += f"üìä –í—Ö–æ–¥–Ω–æ–π —Å–ø—Ä–µ–¥: {pos['entry_spread']:.2f}%\n\n"
                await self.send_message(chat_id, message)
                
        elif command.startswith("/subscribe"):
            if user_id in self.subscribers:
                await self.send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            else:
                self.subscribers.add(user_id)
                await self.send_message(chat_id, "üîî –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
                
        elif command.startswith("/unsubscribe"):
            if user_id in self.subscribers:
                self.subscribers.remove(user_id)
                await self.send_message(chat_id, "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            else:
                await self.send_message(chat_id, "‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            await self.send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    async def send_arbitrage_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if signal.action == "OPEN":
            emoji = "üü¢üü¢" if signal.urgency_level == 3 else "üü¢" if signal.urgency_level == 2 else "üìà"
            
            message = f"{emoji} *–ê–†–ë–ò–¢–†–ê–ñ –°–ò–ì–ù–ê–õ*\n\n"
            message += f"üéØ *{signal.stock_ticker}/{signal.futures_ticker}*\n"
            message += f"üìä –°–ø—Ä–µ–¥: *{signal.spread_percent:.2f}%*\n\n"
            message += f"üíº *–ü–æ–∑–∏—Ü–∏–∏:*\n"
            message += f"üìà –ê–∫—Ü–∏–∏ {signal.stock_ticker}: *{signal.stock_position}* {signal.stock_lots} –ª–æ—Ç–æ–≤\n"
            message += f"üìä –§—å—é—á–µ—Ä—Å {signal.futures_ticker}: *{signal.futures_position}* {signal.futures_lots} –ª–æ—Ç–æ–≤\n\n"
            message += f"üí∞ *–¶–µ–Ω—ã:*\n"
            message += f"üìà {signal.stock_ticker}: {signal.stock_price:.2f} ‚ÇΩ\n"
            message += f"üìä {signal.futures_ticker}: {signal.futures_price:.2f} ‚ÇΩ\n\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {signal.timestamp}"
            
        else:  # CLOSE
            message = "üîÑ *–°–ò–ì–ù–ê–õ –ù–ê –ó–ê–ö–†–´–¢–ò–ï*\n\n"
            message += f"üëã –î—Ä—É–∂–∏—â–µ, –ø–æ—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ *{signal.stock_ticker}/{signal.futures_ticker}*!\n\n"
            message += f"üìâ –°–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ: *{signal.spread_percent:.2f}%*\n\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {signal.timestamp}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        failed_subscribers = []
        for subscriber_id in self.subscribers.copy():
            success = await self.send_message(subscriber_id, message)
            if not success:
                failed_subscribers.append(subscriber_id)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        for failed_id in failed_subscribers:
            self.subscribers.discard(failed_id)
    
    async def monitoring_cycle(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        logger.info("–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            async with MOEXAPIClient() as moex_client:
                quotes = await moex_client.get_multiple_quotes(self.config.MONITORED_INSTRUMENTS)
            
            if not quotes:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
                return
            
            current_time = datetime.now(timezone.utc).strftime("%H:%M:%S")
            signals = []
            
            for stock_ticker, (stock_price, futures_price) in quotes.items():
                if stock_price is None or futures_price is None:
                    continue
                
                futures_ticker = self.config.MONITORED_INSTRUMENTS[stock_ticker]
                signal = self.calculator.analyze_arbitrage_opportunity(
                    stock_ticker=stock_ticker,
                    futures_ticker=futures_ticker,
                    stock_price=stock_price,
                    futures_price=futures_price,
                    timestamp=current_time
                )
                
                if signal:
                    signals.append(signal)
                    if signal.action == "OPEN":
                        self.calculator.register_position(signal)
                    elif signal.action == "CLOSE":
                        self.calculator.close_position(signal)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            for signal in signals:
                await self.send_arbitrage_signal(signal)
            
            logger.info(f"–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        async def monitoring_task():
            while True:
                await self.monitoring_cycle()
                await asyncio.sleep(self.config.MONITORING_INTERVAL)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        monitor_task = asyncio.create_task(monitoring_task())
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            while True:
                updates = await self.get_updates()
                
                for update in updates:
                    if update.message:
                        chat_id = update.message["chat"]["id"]
                        user_id = update.message["from"]["id"]
                        text = update.message.get("text", "")
                        
                        if text.startswith("/"):
                            await self.handle_command(chat_id, text, user_id)
                        else:
                            await self.send_message(chat_id, "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            monitor_task.cancel()
            try:
                await monitor_task
            except asyncio.CancelledError:
                pass

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    async with SimpleTelegramBot(token) as bot:
        await bot.run()

if __name__ == "__main__":
    asyncio.run(main())