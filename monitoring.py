import asyncio
import logging
from datetime import datetime, timezone
from typing import List, Dict, Optional
from telegram.constants import ParseMode
from telegram.error import TelegramError
from config import Config
from moex_api import MOEXAPIClient
from arbitrage_calculator import ArbitrageCalculator, ArbitrageSignal

logger = logging.getLogger(__name__)

class ArbitrageMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.config = Config()
        self.calculator = ArbitrageCalculator()
        self.application = None
        self.subscribers = set()
        self.is_running = False
        
    def set_application(self, application):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application"""
        self.application = application
    
    def set_subscribers(self, subscribers: set):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        self.subscribers = subscribers
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        
        while self.is_running:
            try:
                await self._monitoring_cycle()
                await asyncio.sleep(self.config.MONITORING_INTERVAL)
                
            except asyncio.CancelledError:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _monitoring_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            async with MOEXAPIClient() as moex_client:
                quotes = await moex_client.get_multiple_quotes(
                    self.config.MONITORED_INSTRUMENTS
                )
            
            if not quotes:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = await self._analyze_quotes(quotes)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if signals:
                await self._send_signals(signals)
            
            logger.info(f"–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def _analyze_quotes(self, quotes: Dict) -> List[ArbitrageSignal]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        current_time = datetime.now(timezone.utc).strftime("%H:%M:%S")
        
        for stock_ticker, (stock_price, futures_price) in quotes.items():
            try:
                if stock_price is None or futures_price is None:
                    logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {stock_ticker}")
                    continue
                
                futures_ticker = self.config.MONITORED_INSTRUMENTS[stock_ticker]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                signal = self.calculator.analyze_arbitrage_opportunity(
                    stock_ticker=stock_ticker,
                    futures_ticker=futures_ticker,
                    stock_price=stock_price,
                    futures_price=futures_price,
                    timestamp=current_time
                )
                
                if signal:
                    signals.append(signal)
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    if signal.action == "OPEN":
                        self.calculator.register_position(signal)
                    elif signal.action == "CLOSE":
                        self.calculator.close_position(signal)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {stock_ticker}: {e}")
        
        return signals
    
    async def _send_signals(self, signals: List[ArbitrageSignal]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.application or not self.subscribers:
            logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ application –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ bot_handlers
        from bot_handlers import BotHandlers
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É BotHandlers
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ dependency injection
        
        for signal in signals:
            message = self._format_signal_message(signal)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            failed_subscribers = []
            
            for subscriber_id in self.subscribers.copy():
                try:
                    await self.application.bot.send_message(
                        chat_id=subscriber_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber_id}: {e}")
                    failed_subscribers.append(subscriber_id)
                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {subscriber_id}: {e}")
                    failed_subscribers.append(subscriber_id)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            for failed_id in failed_subscribers:
                self.subscribers.discard(failed_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {failed_id}")
    
    def _format_signal_message(self, signal: ArbitrageSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        
        if signal.action == "OPEN":
            return self._format_open_signal(signal)
        elif signal.action == "CLOSE":
            return self._format_close_signal(signal)
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞"
    
    def _format_open_signal(self, signal: ArbitrageSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if signal.urgency_level == 3:  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
            emoji = "üü¢üü¢"
            format_start = "*"
            format_end = "*"
        elif signal.urgency_level == 2:  # –ó–µ–ª–µ–Ω—ã–π
            emoji = "üü¢"
            format_start = "*"
            format_end = "*"
        else:  # –û–±—ã—á–Ω—ã–π
            emoji = "üìà"
            format_start = ""
            format_end = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫
        stock_arrow = "üìà" if signal.stock_position == "BUY" else "üìâ"
        futures_arrow = "üìà" if signal.futures_position == "BUY" else "üìâ"
        
        message = f"{emoji} {format_start}–ê–†–ë–ò–¢–†–ê–ñ –°–ò–ì–ù–ê–õ{format_end}\n\n"
        message += f"üéØ *{signal.stock_ticker}/{signal.futures_ticker}*\n"
        message += f"üìä –°–ø—Ä–µ–¥: *{signal.spread_percent:.2f}%*\n\n"
        
        message += f"üíº *–ü–æ–∑–∏—Ü–∏–∏:*\n"
        message += f"{stock_arrow} –ê–∫—Ü–∏–∏ {signal.stock_ticker}: *{signal.stock_position}* {signal.stock_lots} –ª–æ—Ç–æ–≤\n"
        message += f"{futures_arrow} –§—å—é—á–µ—Ä—Å {signal.futures_ticker}: *{signal.futures_position}* {signal.futures_lots} –ª–æ—Ç–æ–≤\n\n"
        
        message += f"üí∞ *–¶–µ–Ω—ã:*\n"
        message += f"üìà {signal.stock_ticker}: {signal.stock_price:.2f} ‚ÇΩ\n"
        message += f"üìä {signal.futures_ticker}: {signal.futures_price:.2f} ‚ÇΩ\n\n"
        
        # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        potential_profit = self.calculator.calculate_potential_profit(signal)
        if potential_profit > 0:
            message += f"üíµ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ~{potential_profit:.0f} ‚ÇΩ\n\n"
        
        message += f"‚è∞ –í—Ä–µ–º—è: {signal.timestamp}"
        
        return message
    
    def _format_close_signal(self, signal: ArbitrageSignal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        
        message = "üîÑ *–°–ò–ì–ù–ê–õ –ù–ê –ó–ê–ö–†–´–¢–ò–ï*\n\n"
        message += f"üëã –î—Ä—É–∂–∏—â–µ, –ø–æ—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ *{signal.stock_ticker}/{signal.futures_ticker}*!\n\n"
        
        message += f"üìâ –°–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ: *{signal.spread_percent:.2f}%*\n\n"
        
        message += f"üîö *–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é:*\n"
        message += f"‚Ä¢ –ê–∫—Ü–∏–∏ {signal.stock_ticker}: *{signal.stock_position}* {signal.stock_lots} –ª–æ—Ç–æ–≤\n"
        message += f"‚Ä¢ –§—å—é—á–µ—Ä—Å {signal.futures_ticker}: *{signal.futures_position}* {signal.futures_lots} –ª–æ—Ç–æ–≤\n\n"
        
        message += f"‚è∞ –í—Ä–µ–º—è: {signal.timestamp}"
        
        return message
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    def get_monitoring_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            "is_running": self.is_running,
            "open_positions": len(self.calculator.open_positions),
            "monitored_instruments": len(self.config.MONITORED_INSTRUMENTS),
            "subscribers_count": len(self.subscribers)
        }
