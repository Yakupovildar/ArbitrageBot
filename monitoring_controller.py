"""
ะะพะฝััะพะปะปะตั ะผะพะฝะธัะพัะธะฝะณะฐ ะดะปั ัะฟัะฐะฒะปะตะฝะธั ัะพััะพัะฝะธะตะผ ะผะพะฝะธัะพัะธะฝะณะฐ ะฟะพะปัะทะพะฒะฐัะตะปะตะน
"""

import logging
from typing import Dict, Set, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class MonitoringController:
    """ะะพะฝััะพะปะปะตั ะดะปั ัะฟัะฐะฒะปะตะฝะธั ัะพััะพัะฝะธะตะผ ะผะพะฝะธัะพัะธะฝะณะฐ"""
    
    def __init__(self):
        # ะะพะปัะทะพะฒะฐัะตะปะธ, ะบะพัะพััะต ะฒะบะปััะธะปะธ ะผะพะฝะธัะพัะธะฝะณ
        self.active_monitoring_users: Set[int] = set()
        
        # ะะพะปัะทะพะฒะฐัะตะปะธ, ะบะพัะพััั ัะฒะตะดะพะผะธะปะธ ะพ ะทะฐะบัััะพะน ะฑะธัะถะต
        self.notified_market_closed: Set[int] = set()
        
        # ะะพะปัะทะพะฒะฐัะตะปะธ, ะพะถะธะดะฐััะธะต ัะตัะตะฝะธั ะพ ะผะพะฝะธัะพัะธะฝะณะต ะฟะพัะปะต ะพัะบัััะธั ะฑะธัะถะธ
        self.pending_market_open_users: Set[int] = set()
        
        # ะะพัะปะตะดะฝะธะต ัะฒะตะดะพะผะปะตะฝะธั ะพะฑ ะพัะธะฑะบะฐั API
        self.last_api_error_notification: Dict[str, datetime] = {}
        
        # ะคะปะฐะณ ะณะปะพะฑะฐะปัะฝะพะณะพ ะผะพะฝะธัะพัะธะฝะณะฐ (ะทะฐะฟััะบะฐะตััั ัะพะปัะบะพ ะตัะปะธ ะตััั ะฐะบัะธะฒะฝัะต ะฟะพะปัะทะพะฒะฐัะตะปะธ)
        self.global_monitoring_active = False
        
        # ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ ะดะปั ัะฒะตะดะพะผะปะตะฝะธะน ะพะฑ ะพัะธะฑะบะฐั
        self.admin_user_id: Optional[int] = None
        
    def start_monitoring_for_user(self, user_id: int) -> bool:
        """ะะฐะฟััะบ ะผะพะฝะธัะพัะธะฝะณะฐ ะดะปั ะฟะพะปัะทะพะฒะฐัะตะปั"""
        self.active_monitoring_users.add(user_id)
        if not self.global_monitoring_active:
            self.global_monitoring_active = True
            logger.info(f"ะะปะพะฑะฐะปัะฝัะน ะผะพะฝะธัะพัะธะฝะณ ะทะฐะฟััะตะฝ ะดะปั ะฟะพะปัะทะพะฒะฐัะตะปั {user_id}")
        return True
        
    def stop_monitoring_for_user(self, user_id: int) -> bool:
        """ะััะฐะฝะพะฒะบะฐ ะผะพะฝะธัะพัะธะฝะณะฐ ะดะปั ะฟะพะปัะทะพะฒะฐัะตะปั"""
        self.active_monitoring_users.discard(user_id)
        self.notified_market_closed.discard(user_id)
        self.pending_market_open_users.discard(user_id)
        
        # ะัะปะธ ะฑะพะปััะต ะฝะตั ะฐะบัะธะฒะฝัั ะฟะพะปัะทะพะฒะฐัะตะปะตะน - ะพััะฐะฝะฐะฒะปะธะฒะฐะตะผ ะณะปะพะฑะฐะปัะฝัะน ะผะพะฝะธัะพัะธะฝะณ
        if not self.active_monitoring_users and self.global_monitoring_active:
            self.global_monitoring_active = False
            logger.info("ะะปะพะฑะฐะปัะฝัะน ะผะพะฝะธัะพัะธะฝะณ ะพััะฐะฝะพะฒะปะตะฝ - ะฝะตั ะฐะบัะธะฒะฝัั ะฟะพะปัะทะพะฒะฐัะตะปะตะน")
        return True
        
    def is_user_monitoring(self, user_id: int) -> bool:
        """ะัะพะฒะตัะบะฐ, ะฒะบะปััะตะฝ ะปะธ ะผะพะฝะธัะพัะธะฝะณ ะดะปั ะฟะพะปัะทะพะฒะฐัะตะปั"""
        return user_id in self.active_monitoring_users
        
    def should_run_global_monitoring(self) -> bool:
        """ะัะถะฝะพ ะปะธ ะทะฐะฟััะบะฐัั ะณะปะพะฑะฐะปัะฝัะน ะผะพะฝะธัะพัะธะฝะณ"""
        return self.global_monitoring_active and len(self.active_monitoring_users) > 0
        
    def get_active_users_count(self) -> int:
        """ะะพะปะธัะตััะฒะพ ะฐะบัะธะฒะฝัั ะฟะพะปัะทะพะฒะฐัะตะปะตะน ะผะพะฝะธัะพัะธะฝะณะฐ"""
        return len(self.active_monitoring_users)
        
    def notify_market_closed(self, user_id: int):
        """ะัะผะตัะธัั, ััะพ ะฟะพะปัะทะพะฒะฐัะตะปั ัะฒะตะดะพะผะปะตะฝ ะพ ะทะฐะบัััะพะน ะฑะธัะถะต"""
        self.notified_market_closed.add(user_id)
        
    def is_user_notified_market_closed(self, user_id: int) -> bool:
        """ะัะป ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ัะฒะตะดะพะผะปะตะฝ ะพ ะทะฐะบัััะพะน ะฑะธัะถะต"""
        return user_id in self.notified_market_closed
        
    def add_pending_market_open_user(self, user_id: int):
        """ะะพะฑะฐะฒะธัั ะฟะพะปัะทะพะฒะฐัะตะปั ะฒ ะพัะตัะตะดั ะฝะฐ ะทะฐะฟััะบ ะฟัะธ ะพัะบัััะธะธ ะฑะธัะถะธ"""
        self.pending_market_open_users.add(user_id)
        
    def remove_pending_market_open_user(self, user_id: int):
        """ะฃะฑัะฐัั ะฟะพะปัะทะพะฒะฐัะตะปั ะธะท ะพัะตัะตะดะธ ะฝะฐ ะทะฐะฟััะบ ะฟัะธ ะพัะบัััะธะธ ะฑะธัะถะธ"""
        self.pending_market_open_users.discard(user_id)
        
    def get_pending_market_open_users(self) -> Set[int]:
        """ะะพะปััะธัั ัะฟะธัะพะบ ะฟะพะปัะทะพะฒะฐัะตะปะตะน, ะพะถะธะดะฐััะธั ะพัะบัััะธั ะฑะธัะถะธ"""
        return self.pending_market_open_users.copy()
        
    def clear_market_closed_notifications(self):
        """ะัะธััะธัั ัะฒะตะดะพะผะปะตะฝะธั ะพ ะทะฐะบัััะพะน ะฑะธัะถะต (ะฟัะธ ะพัะบัััะธะธ ะฑะธัะถะธ)"""
        self.notified_market_closed.clear()
        
    def set_admin_user_id(self, admin_id: int):
        """ะฃััะฐะฝะพะฒะธัั ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ"""
        self.admin_user_id = admin_id
        logger.info(f"ะฃััะฐะฝะพะฒะปะตะฝ ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ: {admin_id}")
        
    def get_admin_user_id(self) -> Optional[int]:
        """ะะพะปััะธัั ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ"""
        return self.admin_user_id
        
    def get_status_summary(self) -> str:
        """ะะพะปััะธัั ัะฒะพะดะบั ัะพััะพัะฝะธั ะผะพะฝะธัะพัะธะฝะณะฐ"""
        return f"""๐ ะกะพััะพัะฝะธะต ะผะพะฝะธัะพัะธะฝะณะฐ:
        
๐ ะะปะพะฑะฐะปัะฝัะน ะผะพะฝะธัะพัะธะฝะณ: {"โ ะะบัะธะฒะตะฝ" if self.global_monitoring_active else "โ ะััะฐะฝะพะฒะปะตะฝ"}
๐ฅ ะะบัะธะฒะฝัั ะฟะพะปัะทะพะฒะฐัะตะปะตะน: {len(self.active_monitoring_users)}
๐ ะฃะฒะตะดะพะผะปะตะฝะพ ะพ ะทะฐะบัััะพะน ะฑะธัะถะต: {len(self.notified_market_closed)}
โณ ะะถะธะดะฐัั ะพัะบัััะธั ะฑะธัะถะธ: {len(self.pending_market_open_users)}
๐จโ๐ผ ะะดะผะธะฝ ัััะฐะฝะพะฒะปะตะฝ: {"โ" if self.admin_user_id else "โ"}"""