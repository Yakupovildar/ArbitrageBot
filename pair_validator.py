"""
–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä MOEX
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
import json

logger = logging.getLogger(__name__)

@dataclass
class PairValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    stock_ticker: str
    futures_ticker: str
    is_valid: bool
    stock_price: Optional[float] = None
    futures_price: Optional[float] = None
    error_message: str = ""
    last_trade_time: Optional[str] = None
    checked_at: datetime = None

    def __post_init__(self):
        if self.checked_at is None:
            self.checked_at = datetime.now()

class PairValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä MOEX"""
    
    def __init__(self):
        self.session = None
        self.last_validation = None
        self.validation_results: Dict[str, PairValidationResult] = {}
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=30)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def validate_stock(self, ticker: str) -> Tuple[bool, Optional[float], str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫—Ü–∏–∏ –Ω–∞ MOEX"""
        try:
            url = f'https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/{ticker}.json?iss.meta=off&iss.only=securities&securities.columns=SECID,PREVPRICE'
            
            async with self.session.get(url) as response:
                if response.status != 200:
                    return False, None, f"HTTP {response.status}"
                
                data = await response.json()
                
                if 'securities' not in data or not data['securities'].get('data'):
                    return False, None, "–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TQBR"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                row = data['securities']['data'][0]
                columns = data['securities']['columns']
                
                if 'PREVPRICE' in columns:
                    prev_idx = columns.index('PREVPRICE')
                    price = row[prev_idx] if len(row) > prev_idx else None
                    
                    if price and price > 0:
                        return True, float(price), ""
                    else:
                        return False, None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö"
                else:
                    return False, None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö"
                    
        except Exception as e:
            return False, None, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def validate_futures(self, ticker: str) -> Tuple[bool, Optional[float], str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–∞ –Ω–∞ MOEX"""
        try:
            url = f'https://iss.moex.com/iss/engines/futures/markets/forts/boards/RFUD/securities/{ticker}.json?iss.meta=off&iss.only=securities&securities.columns=SECID,PREVPRICE'
            
            async with self.session.get(url) as response:
                if response.status != 200:
                    return False, None, f"HTTP {response.status}"
                
                data = await response.json()
                
                if 'securities' not in data or not data['securities'].get('data'):
                    return False, None, "–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ RFUD"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                row = data['securities']['data'][0]
                columns = data['securities']['columns']
                
                if 'PREVPRICE' in columns:
                    prev_idx = columns.index('PREVPRICE')
                    price = row[prev_idx] if len(row) > prev_idx else None
                    
                    if price and price > 0:
                        return True, float(price), ""
                    else:
                        return False, None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö"
                else:
                    return False, None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö"
                    
        except Exception as e:
            return False, None, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def validate_pair(self, stock_ticker: str, futures_ticker: str) -> PairValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä—ã –∞–∫—Ü–∏—è-—Ñ—å—é—á–µ—Ä—Å"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏—é
        stock_valid, stock_price, stock_error = await self.validate_stock(stock_ticker)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—å—é—á–µ—Ä—Å
        futures_valid, futures_price, futures_error = await self.validate_futures(futures_ticker)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        is_valid = stock_valid and futures_valid
        error_message = ""
        
        if not stock_valid:
            error_message += f"–ê–∫—Ü–∏—è {stock_ticker}: {stock_error}. "
        if not futures_valid:
            error_message += f"–§—å—é—á–µ—Ä—Å {futures_ticker}: {futures_error}. "
            
        return PairValidationResult(
            stock_ticker=stock_ticker,
            futures_ticker=futures_ticker,
            is_valid=is_valid,
            stock_price=stock_price,
            futures_price=futures_price,
            error_message=error_message.strip()
        )
    
    async def validate_all_pairs(self, pairs: Dict[str, str]) -> Dict[str, PairValidationResult]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        results = {}
        
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        
        for stock, futures in pairs.items():
            try:
                result = await self.validate_pair(stock, futures)
                results[f"{stock}_{futures}"] = result
                
                if result.is_valid:
                    logger.info(f"‚úÖ {stock}/{futures}: {result.stock_price}‚ÇΩ / {result.futures_price}‚ÇΩ")
                else:
                    logger.error(f"‚ùå {stock}/{futures}: {result.error_message}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {stock}/{futures}: {e}")
                results[f"{stock}_{futures}"] = PairValidationResult(
                    stock_ticker=stock,
                    futures_ticker=futures,
                    is_valid=False,
                    error_message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                )
        
        self.validation_results = results
        self.last_validation = datetime.now()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        valid_count = sum(1 for r in results.values() if r.is_valid)
        invalid_count = len(results) - valid_count
        
        logger.info(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö, {invalid_count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä")
        
        return results
    
    def get_validation_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if not self.validation_results:
            return "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å"
        
        valid_pairs = [r for r in self.validation_results.values() if r.is_valid]
        invalid_pairs = [r for r in self.validation_results.values() if not r.is_valid]
        
        summary = f"""üìä –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –¢–û–†–ì–û–í–´–• –ü–ê–†
        
‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.last_validation.strftime('%H:%M %d.%m.%Y')}
‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä: {len(valid_pairs)}
‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä: {len(invalid_pairs)}

"""
        
        if invalid_pairs:
            summary += "üö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–ê–†–´:\n"
            for result in invalid_pairs:
                summary += f"   ‚Ä¢ {result.stock_ticker}/{result.futures_ticker}: {result.error_message}\n"
            summary += "\n"
        
        if valid_pairs:
            summary += "‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ü–ê–†–´:\n"
            for result in valid_pairs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                spread = 0
                if result.stock_price and result.futures_price:
                    spread = ((result.futures_price - result.stock_price) / result.stock_price) * 100
                summary += f"   ‚Ä¢ {result.stock_ticker}/{result.futures_ticker}: —Å–ø—Ä–µ–¥ {spread:.2f}%\n"
            
            if len(valid_pairs) > 10:
                summary += f"   ... –∏ –µ—â–µ {len(valid_pairs) - 10} –ø–∞—Ä\n"
        
        return summary
    
    def needs_validation(self, hours: int = 24) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        if not self.last_validation:
            return True
        
        time_since_validation = datetime.now() - self.last_validation
        return time_since_validation > timedelta(hours=hours)

async def run_daily_validation():
    """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä"""
    from config import Config
    
    config = Config()
    
    async with PairValidator() as validator:
        results = await validator.validate_all_pairs(config.MONITORED_INSTRUMENTS)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = validator.get_validation_summary()
        print(summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        with open(f'validation_report_{timestamp}.json', 'w', encoding='utf-8') as f:
            results_dict = {}
            for key, result in results.items():
                results_dict[key] = {
                    'stock_ticker': result.stock_ticker,
                    'futures_ticker': result.futures_ticker,
                    'is_valid': result.is_valid,
                    'stock_price': result.stock_price,
                    'futures_price': result.futures_price,
                    'error_message': result.error_message,
                    'checked_at': result.checked_at.isoformat()
                }
            json.dump(results_dict, f, ensure_ascii=False, indent=2)
        
        return results

if __name__ == "__main__":
    asyncio.run(run_daily_validation())