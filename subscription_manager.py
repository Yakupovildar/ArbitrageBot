"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
from datetime import datetime, timedelta
from typing import Optional, Dict
from database import db, UserSettings

logger = logging.getLogger(__name__)

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    FREE_TRIAL_DAYS = 7
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    SUBSCRIPTION_PRICE_USDT = 10
    SUBSCRIPTION_DURATION_DAYS = 30
    CRYPTO_ADDRESS = ""  # –ê–¥—Ä–µ—Å –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –ø–æ–∑–∂–µ
    
    def __init__(self):
        self.subscription_cache = {}  # –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    
    async def check_signal_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            user_settings = await db.load_user_settings(user_id)
            if not user_settings:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                await self.activate_trial_period(user_id)
                return True
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç
            if await self.is_subscription_active(user_id):
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if await self.is_trial_active(user_id):
                return True
            
            # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫, –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {user_id}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º
    
    async def increment_signal_count(self, user_id: int) -> int:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            user_settings = await db.load_user_settings(user_id)
            if not user_settings:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                user_settings = UserSettings(user_id=user_id, signals_sent=1)
            else:
                user_settings.signals_sent += 1
            
            await db.save_user_settings(user_settings)
            return user_settings.signals_sent
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {user_id}: {e}")
            return 0
    
    async def is_subscription_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user_settings = await db.load_user_settings(user_id)
            if not user_settings:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if not user_settings.subscription_active:
                return False
            
            if not user_settings.subscription_end:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            return datetime.now() < user_settings.subscription_end
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    async def get_remaining_trial_days(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            if await self.is_subscription_active(user_id):
                return None  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
            
            user_settings = await db.load_user_settings(user_id)
            if not user_settings or not user_settings.trial_end:
                return self.FREE_TRIAL_DAYS  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
            remaining = (user_settings.trial_end - datetime.now()).days
            return max(0, remaining)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {user_id}: {e}")
            return self.FREE_TRIAL_DAYS
    
    async def activate_subscription(self, user_id: int, duration_days: int = None) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if duration_days is None:
                duration_days = self.SUBSCRIPTION_DURATION_DAYS
            
            user_settings = await db.load_user_settings(user_id)
            if not user_settings:
                user_settings = UserSettings(user_id=user_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
            start_date = datetime.now()
            end_date = start_date + timedelta(days=duration_days)
            
            user_settings.subscription_active = True
            user_settings.subscription_start = start_date
            user_settings.subscription_end = end_date
            
            await db.save_user_settings(user_settings)
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {end_date}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    async def activate_trial_period(self, user_id: int) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_settings = await db.load_user_settings(user_id)
            if not user_settings:
                user_settings = UserSettings(user_id=user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            if user_settings.trial_end:
                return False  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –±—ã–ª
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            start_date = datetime.now()
            end_date = start_date + timedelta(days=self.FREE_TRIAL_DAYS)
            
            user_settings.trial_start = start_date
            user_settings.trial_end = end_date
            
            await db.save_user_settings(user_settings)
            
            logger.info(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {end_date}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {user_id}: {e}")
            return False
    
    async def is_trial_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            user_settings = await db.load_user_settings(user_id)
            if not user_settings or not user_settings.trial_end:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            return datetime.now() < user_settings.trial_end
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {user_id}: {e}")
            return False
    
    def get_subscription_offer_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        return f"""üíé **–ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê**

‚è∞ **–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫**

üöÄ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:**
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {self.SUBSCRIPTION_PRICE_USDT} USDT/–º–µ—Å—è—Ü

üéØ **–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?** –ú—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å"""
    
    def get_payment_instructions(self) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return f"""üí≥ **–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –û–ü–õ–ê–¢–ï**

üí∞ **–°—É–º–º–∞:** {self.SUBSCRIPTION_PRICE_USDT} USDT
üìã **–°–µ—Ç—å:** TRC-20 (Tron)
üè¶ **–ê–¥—Ä–µ—Å:** `{self.CRYPTO_ADDRESS or '–ë—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}`

üì± **–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ (Trust Wallet, Binance –∏ –¥—Ä.)
2. –í—ã–±–µ—Ä–∏—Ç–µ USDT (TRC-20)
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ {self.SUBSCRIPTION_PRICE_USDT} USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
4. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ

‚ö° **–ê–∫—Ç–∏–≤–∞—Ü–∏—è:** –î–æ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
üîî **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ Telegram

üí° –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    
    async def deactivate_subscription(self, user_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        try:
            user_settings = await db.load_user_settings(user_id)
            if not user_settings:
                return True
            
            user_settings.subscription_active = False
            await db.save_user_settings(user_settings)
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    def get_subscription_offer_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        return f"""üîí **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!**

–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º {self.FREE_TIER_SIGNAL_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. 

üíé **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞:**
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {self.SUBSCRIPTION_PRICE_USDT} USDT
‚è± **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** {self.SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π

–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É?"""
    
    def get_payment_instructions(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ"""
        return f"""üí≥ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:**

üè¶ **–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:** 
`[–ë—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏]`
üåê **–°–µ—Ç—å:** TRC-20 (TRON)
üí∞ **–°—É–º–º–∞:** {self.SUBSCRIPTION_PRICE_USDT} USDT

üìã **–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ {self.SUBSCRIPTION_PRICE_USDT} USDT –≤ —Å–µ—Ç–∏ TRC-20
3. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å TRC-20
‚Ä¢ –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω–æ–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞."""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
subscription_manager = SubscriptionManager()