"""
–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä—ã –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from pair_validator import PairValidator
from config import Config

logger = logging.getLogger(__name__)

class DailyValidator:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    
    def __init__(self):
        self.config = Config()
        self.last_validation = None
        
    async def run_validation(self):
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        
        try:
            async with PairValidator() as validator:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ–ª—É–±—ã–µ —Ñ–∏—à–∫–∏
                core_pairs = {
                    'SBER': 'SBERF',  
                    'GAZP': 'GAZPF',  
                    'LKOH': 'LKZ5',   
                    'GMKN': 'GKZ5',   
                    'VTBR': 'VBZ5',   
                    'ROSN': 'RNZ5',   
                    'TATN': 'TNZ5',   
                    'ALRS': 'ALZ5',   
                }
                
                results = await validator.validate_all_pairs(core_pairs)
                
                # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                valid_count = sum(1 for r in results.values() if r.is_valid)
                invalid_count = len(results) - valid_count
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if invalid_count > 0:
                    logger.error(f"üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–ê–†–´: {invalid_count} –∏–∑ {len(results)}")
                    
                    for pair_key, result in results.items():
                        if not result.is_valid:
                            logger.error(f"‚ùå {result.stock_ticker}/{result.futures_ticker}: {result.error_message}")
                else:
                    logger.info(f"‚úÖ –í—Å–µ {len(results)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                self._save_validation_report(results)
                self.last_validation = datetime.now()
                
                return results
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {}
    
    def _save_validation_report(self, results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'validation_report_{timestamp}.json'
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'total_pairs': len(results),
            'valid_pairs': sum(1 for r in results.values() if r.is_valid),
            'invalid_pairs': sum(1 for r in results.values() if not r.is_valid),
            'results': {}
        }
        
        for key, result in results.items():
            report_data['results'][key] = {
                'stock_ticker': result.stock_ticker,
                'futures_ticker': result.futures_ticker,
                'is_valid': result.is_valid,
                'stock_price': result.stock_price,
                'futures_price': result.futures_price,
                'error_message': result.error_message,
                'checked_at': result.checked_at.isoformat()
            }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üìÑ –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def should_run_validation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        if not self.last_validation:
            return True
        
        time_since_last = datetime.now() - self.last_validation
        return time_since_last > timedelta(hours=24)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    validator = DailyValidator()
    await validator.run_validation()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())