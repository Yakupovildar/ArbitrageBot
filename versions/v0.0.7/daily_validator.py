"""
–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä—ã –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from pair_validator import PairValidator
from pair_status_manager import PairStatusManager, PairStatus
from config import Config

logger = logging.getLogger(__name__)

class DailyValidator:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    
    def __init__(self):
        self.config = Config()
        self.status_manager = PairStatusManager()
        self.last_validation = None
        
    async def run_validation(self):
        """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–ø—Ä–µ–¥–æ–≤"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ —É—Å–∏–ª–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            pair_statuses = await self.status_manager.check_all_pairs()
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            active_count = len(self.status_manager.active_pairs)
            blocked_count = len(self.status_manager.blocked_pairs)
            unavailable_count = len(self.status_manager.unavailable_pairs)
            total_count = len(pair_statuses)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –Ω–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò {total_count} –¢–û–†–ì–û–í–´–• –ü–ê–†:")
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}")
            logger.info(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {blocked_count}") 
            logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ: {unavailable_count}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –ø–∞—Ä–∞–º
            if blocked_count > 0:
                logger.warning(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–´ ({blocked_count}):")
                for pair_key in self.status_manager.blocked_pairs:
                    info = pair_statuses[pair_key]
                    logger.warning(f"   {pair_key} (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞): {info.reason}")
                    
            if unavailable_count > 0:
                logger.error(f"‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–´ ({unavailable_count}):")
                for pair_key in self.status_manager.unavailable_pairs:
                    info = pair_statuses[pair_key]
                    logger.error(f"   {pair_key} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞): {info.reason}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                self._save_validation_report(results)
                self.last_validation = datetime.now()
                
                return results
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {}
    
    def _save_validation_report(self, results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'validation_report_{timestamp}.json'
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'total_pairs': len(results),
            'valid_pairs': sum(1 for r in results.values() if r.is_valid),
            'invalid_pairs': sum(1 for r in results.values() if not r.is_valid),
            'results': {}
        }
        
        for key, result in results.items():
            report_data['results'][key] = {
                'stock_ticker': result.stock_ticker,
                'futures_ticker': result.futures_ticker,
                'is_valid': result.is_valid,
                'stock_price': result.stock_price,
                'futures_price': result.futures_price,
                'error_message': result.error_message,
                'checked_at': result.checked_at.isoformat()
            }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üìÑ –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def should_run_validation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        if not self.last_validation:
            return True
        
        time_since_last = datetime.now() - self.last_validation
        return time_since_last > timedelta(hours=24)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    validator = DailyValidator()
    await validator.run_validation()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())