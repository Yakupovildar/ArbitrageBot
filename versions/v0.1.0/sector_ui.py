#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —Å–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
"""

import logging
from typing import Dict, List, Tuple
from sectors_classification import sector_classifier, EconomicSector
from bot_ui_restrictions import ui_restrictions

logger = logging.getLogger(__name__)

class SectorUI:
    """–°–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    
    def __init__(self):
        self.classifier = sector_classifier
        self.restrictions = ui_restrictions
    
    def get_sectors_menu_keyboard(self) -> Dict:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤"""
        sectors_dict = self.classifier.get_sectors_dict()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        available_sectors = {}
        for sector, pairs in sectors_dict.items():
            available_pairs = []
            for stock, futures in pairs:
                if self.restrictions.status_manager.is_pair_available(stock, futures):
                    available_pairs.append((stock, futures))
            
            if available_pairs:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ç–æ—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
                available_sectors[sector] = available_pairs
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
        keyboard = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        sector_buttons = []
        for sector in available_sectors.keys():
            pairs_count = len(available_sectors[sector])
            button_text = f"{sector.value} ({pairs_count})"
            callback_data = f"sector_{sector.name.lower()}"
            
            sector_buttons.append({"text": button_text, "callback_data": callback_data})
            
            # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(sector_buttons) == 2:
                keyboard.append(sector_buttons)
                sector_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É
        if sector_buttons:
            keyboard.append(sector_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            {"text": "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ", "callback_data": "sector_all_available"},
            {"text": "üö´ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "callback_data": "sector_blocked"}
        ])
        
        keyboard.append([
            {"text": "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"}
        ])
        
        return {"inline_keyboard": keyboard}
    
    def get_sector_pairs_keyboard(self, sector_name: str) -> Dict:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞—Ä–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞"""
        try:
            sector_enum = EconomicSector[sector_name.upper()]
        except KeyError:
            return self.get_sectors_menu_keyboard()
        
        sectors_dict = self.classifier.get_sectors_dict()
        
        if sector_enum not in sectors_dict:
            return self.get_sectors_menu_keyboard()
        
        pairs = sectors_dict[sector_enum]
        keyboard = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        row = []
        for stock, futures in pairs:
            if self.restrictions.status_manager.is_pair_available(stock, futures):
                company_name = self.classifier.companies.get(stock, {}).name if hasattr(self.classifier.companies.get(stock, {}), 'name') else stock
                button_text = f"{stock}/{futures}"
                callback_data = f"pair_{stock}_{futures}"
                
                row.append({"text": button_text, "callback_data": callback_data})
                
                # –ü–æ 2 –ø–∞—Ä—ã –≤ —Ä—è–¥
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É
        if row:
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            {"text": "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã —Å–µ–∫—Ç–æ—Ä–∞", "callback_data": f"sector_select_all_{sector_name.lower()}"},
            {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", "callback_data": f"sector_deselect_all_{sector_name.lower()}"}
        ])
        
        keyboard.append([
            {"text": "üîô –ö –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–æ–≤", "callback_data": "sectors_menu"}
        ])
        
        return {"inline_keyboard": keyboard}
    
    def get_sectors_summary_message(self) -> str:
        """–°–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        sectors_dict = self.classifier.get_sectors_dict()
        
        message = "üìä **–¢–û–†–ì–û–í–´–ï –ü–ê–†–´ –ü–û –°–ï–ö–¢–û–†–ê–ú**\n\n"
        
        total_available = 0
        total_blocked = 0
        total_unavailable = 0
        
        for sector, pairs in sectors_dict.items():
            available_pairs = []
            blocked_pairs = []
            unavailable_pairs = []
            
            for stock, futures in pairs:
                if self.restrictions.status_manager.is_pair_available(stock, futures):
                    available_pairs.append((stock, futures))
                    total_available += 1
                else:
                    status_info = self.restrictions.status_manager.get_pair_status_info(stock, futures)
                    if status_info and hasattr(status_info, 'status'):
                        from pair_status_manager import PairStatus
                        if status_info.status == PairStatus.BLOCKED:
                            blocked_pairs.append((stock, futures))
                            total_blocked += 1
                        else:
                            unavailable_pairs.append((stock, futures))
                            total_unavailable += 1
            
            if available_pairs or blocked_pairs or unavailable_pairs:
                message += f"**{sector.value}**\n"
                
                if available_pairs:
                    message += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_pairs)} –ø–∞—Ä\n"
                if blocked_pairs:
                    message += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_pairs)} –ø–∞—Ä\n"  
                if unavailable_pairs:
                    message += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {len(unavailable_pairs)} –ø–∞—Ä\n"
                
                message += "\n"
        
        message += f"**üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
        message += f"‚úÖ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä: {total_available}\n"
        message += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {total_blocked}\n"
        message += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä: {total_unavailable}\n\n"
        
        message += "üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä*"
        
        return message
    
    def get_sector_description(self, sector_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞"""
        try:
            sector_enum = EconomicSector[sector_name.upper()]
            sectors_dict = self.classifier.get_sectors_dict()
            
            if sector_enum not in sectors_dict:
                return "–°–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            pairs = sectors_dict[sector_enum]
            available_pairs = [
                (stock, futures) for stock, futures in pairs 
                if self.restrictions.status_manager.is_pair_available(stock, futures)
            ]
            
            message = f"**{sector_enum.value}**\n\n"
            message += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(available_pairs)}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–µ–∫—Ç–æ—Ä–µ
            if available_pairs:
                message += "**üè¢ –ö–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–µ–∫—Ç–æ—Ä–µ:**\n"
                for stock, futures in available_pairs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    company_info = self.classifier.companies.get(stock)
                    if company_info:
                        message += f"‚Ä¢ {stock} - {company_info.name}\n"
                    else:
                        message += f"‚Ä¢ {stock}\n"
                
                if len(available_pairs) > 10:
                    message += f"‚Ä¢ ... –∏ –µ—â–µ {len(available_pairs) - 10} –∫–æ–º–ø–∞–Ω–∏–π\n"
            
            return message
            
        except KeyError:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–∫—Ç–æ—Ä"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
sector_ui = SectorUI()