"""
–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from dataclasses import dataclass, field
from typing import Dict, List, Optional
import json
import logging

logger = logging.getLogger(__name__)

@dataclass
class UserSettings:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    monitoring_interval: int = 300  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    spread_threshold: float = 1.0   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%
    source_rotation_index: int = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    AVAILABLE_INTERVALS = {
        30: "30 —Å–µ–∫—É–Ω–¥",
        60: "1 –º–∏–Ω—É—Ç–∞", 
        180: "3 –º–∏–Ω—É—Ç—ã",
        300: "5 –º–∏–Ω—É—Ç",
        900: "15 –º–∏–Ω—É—Ç"
    }
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Å–ø—Ä–µ–¥–æ–≤
    AVAILABLE_SPREADS = {
        0.5: "0.5%",
        0.7: "0.7%", 
        0.9: "0.9%",
        1.0: "1.0%",
        1.5: "1.5%",
        2.0: "2.0%",
        3.0: "3.0%"
    }
    
    def get_interval_display(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        return self.AVAILABLE_INTERVALS.get(self.monitoring_interval, f"{self.monitoring_interval} —Å–µ–∫")
    
    def get_spread_display(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —Å–ø—Ä–µ–¥–∞"""
        return self.AVAILABLE_SPREADS.get(self.spread_threshold, f"{self.spread_threshold}%")
    
    def is_fast_monitoring(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç—Ä–µ–±—É–µ—Ç —Ä–æ—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)"""
        return self.monitoring_interval < 300  # –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
    
    def get_next_source_index(self, total_sources: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏"""
        self.source_rotation_index = (self.source_rotation_index + 1) % total_sources
        return self.source_rotation_index

class UserSettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.user_settings: Dict[int, UserSettings] = {}
        self.data_sources = [
            "moex",
            "tradingview", 
            "investing_com",
            "alpha_vantage",
            "finam"
        ]
    
    def get_user_settings(self, user_id: int) -> UserSettings:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"""
        if user_id not in self.user_settings:
            self.user_settings[user_id] = UserSettings(user_id=user_id)
        return self.user_settings[user_id]
    
    def update_monitoring_interval(self, user_id: int, interval: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if interval not in UserSettings.AVAILABLE_INTERVALS:
            return False
        
        settings = self.get_user_settings(user_id)
        settings.monitoring_interval = interval
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ {interval} —Å–µ–∫")
        return True
    
    def update_spread_threshold(self, user_id: int, threshold: float) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if threshold not in UserSettings.AVAILABLE_SPREADS:
            return False
            
        settings = self.get_user_settings(user_id)
        settings.spread_threshold = threshold
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –Ω–∞ {threshold}%")
        return True
    
    def get_current_source_for_user(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
        settings = self.get_user_settings(user_id)
        
        if settings.is_fast_monitoring():
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            source_index = settings.get_next_source_index(len(self.data_sources))
            source = self.data_sources[source_index]
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Ä–æ—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ -> {source}")
            return source
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º MOEX
            return "moex"
    
    def get_settings_keyboard(self, user_id: int) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.get_interval_display()}", "callback_data": "settings_interval"},
                    {"text": f"üìä –°–ø—Ä–µ–¥: {settings.get_spread_display()}", "callback_data": "settings_spread"}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}
                ]
            ]
        }
        return keyboard
    
    def get_interval_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        keyboard_rows = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        intervals = list(UserSettings.AVAILABLE_INTERVALS.items())
        for i in range(0, len(intervals), 2):
            row = []
            for j in range(2):
                if i + j < len(intervals):
                    interval, display = intervals[i + j]
                    row.append({"text": display, "callback_data": f"interval_{interval}"})
            keyboard_rows.append(row)
        
        keyboard_rows.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}])
        
        return {"inline_keyboard": keyboard_rows}
    
    def get_spread_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞ —Å–ø—Ä–µ–¥–∞"""
        keyboard_rows = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        spreads = list(UserSettings.AVAILABLE_SPREADS.items())
        for i in range(0, len(spreads), 3):
            row = []
            for j in range(3):
                if i + j < len(spreads):
                    spread, display = spreads[i + j]
                    row.append({"text": display, "callback_data": f"spread_{spread}"})
            keyboard_rows.append(row)
        
        keyboard_rows.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}])
        
        return {"inline_keyboard": keyboard_rows}
    
    def get_settings_summary(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        
        summary = f"""‚öôÔ∏è –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {settings.get_interval_display()}
üìä –ü–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞: {settings.get_spread_display()}

"""
        
        if settings.is_fast_monitoring():
            summary += "üîÑ –ë—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤–∫–ª—é—á–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n\n"
        else:
            summary += "üêå –û–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –±–µ–∑ —Ä–æ—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
            
        summary += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:"
        
        return summary