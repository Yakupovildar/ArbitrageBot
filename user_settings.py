"""
–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from dataclasses import dataclass, field
from typing import Dict, List, Optional
import json
import logging

logger = logging.getLogger(__name__)

@dataclass
class UserSettings:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    monitoring_interval: int = 300  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    spread_threshold: float = 1.0   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%
    max_signals: int = 3            # –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Ä–∞–∑
    source_rotation_index: int = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    selected_instruments: List[str] = field(default_factory=list)  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–º–∞–∫—Å 10)
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    AVAILABLE_INTERVALS = {
        30: "30 —Å–µ–∫—É–Ω–¥",
        60: "1 –º–∏–Ω—É—Ç–∞", 
        180: "3 –º–∏–Ω—É—Ç—ã",
        300: "5 –º–∏–Ω—É—Ç",
        900: "15 –º–∏–Ω—É—Ç"
    }
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —Å–ø—Ä–µ–¥–æ–≤
    AVAILABLE_SPREADS = {
        0.2: "0.2%",
        0.3: "0.3%",
        0.4: "0.4%",
        0.5: "0.5%",
        0.7: "0.7%", 
        0.9: "0.9%",
        1.0: "1.0%",
        1.5: "1.5%",
        2.0: "2.0%",
        3.0: "3.0%"
    }
    
    def get_interval_display(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        return self.AVAILABLE_INTERVALS.get(self.monitoring_interval, f"{self.monitoring_interval} —Å–µ–∫")
    
    def get_spread_display(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —Å–ø—Ä–µ–¥–∞"""
        return self.AVAILABLE_SPREADS.get(self.spread_threshold, f"{self.spread_threshold:.2f}%")
    
    def is_fast_monitoring(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç—Ä–µ–±—É–µ—Ç —Ä–æ—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)"""
        return self.monitoring_interval < 300  # –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
    
    def get_next_source_index(self, total_sources: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏"""
        self.source_rotation_index = (self.source_rotation_index + 1) % total_sources
        return self.source_rotation_index
    
    def add_instrument(self, instrument_key: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (–º–∞–∫—Å–∏–º—É–º 10)"""
        if len(self.selected_instruments) >= 10:
            return False
        if instrument_key not in self.selected_instruments:
            self.selected_instruments.append(instrument_key)
        return True
    
    def remove_instrument(self, instrument_key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        if instrument_key in self.selected_instruments:
            self.selected_instruments.remove(instrument_key)
            return True
        return False
    
    def get_selected_instruments_dict(self, all_instruments: Dict[str, str]) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.selected_instruments:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_instruments = list(all_instruments.keys())[:5]
            return {k: all_instruments[k] for k in default_instruments if k in all_instruments}
        
        return {k: all_instruments[k] for k in self.selected_instruments if k in all_instruments}
    
    def get_selected_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return len(self.selected_instruments)

class UserSettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.user_settings: Dict[int, UserSettings] = {}
        self.data_sources = [
            "moex",
            "tradingview", 
            "investing_com",
            "alpha_vantage",
            "finam"
        ]
    
    def get_user_settings(self, user_id: int) -> UserSettings:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"""
        if user_id not in self.user_settings:
            self.user_settings[user_id] = UserSettings(user_id=user_id)
        return self.user_settings[user_id]
    
    def update_monitoring_interval(self, user_id: int, interval: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if interval not in UserSettings.AVAILABLE_INTERVALS:
            return False
        
        settings = self.get_user_settings(user_id)
        settings.monitoring_interval = interval
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ {interval} —Å–µ–∫")
        return True
    
    def update_spread_threshold(self, user_id: int, threshold: float) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if threshold not in UserSettings.AVAILABLE_SPREADS:
            return False
            
        settings = self.get_user_settings(user_id)
        settings.spread_threshold = threshold
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –Ω–∞ {threshold}%")
        return True
    
    def update_max_signals(self, user_id: int, max_signals: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Ä–∞–∑"""
        if max_signals < 1 or max_signals > 10:
            return False
            
        settings = self.get_user_settings(user_id)
        settings.max_signals = max_signals
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –º–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ {max_signals}")
        return True
    
    def get_current_source_for_user(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
        settings = self.get_user_settings(user_id)
        
        if settings.is_fast_monitoring():
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            source_index = settings.get_next_source_index(len(self.data_sources))
            source = self.data_sources[source_index]
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Ä–æ—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ -> {source}")
            return source
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º MOEX
            return "moex"
    
    def get_settings_keyboard(self, user_id: int) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.get_interval_display()}", "callback_data": "settings_interval"},
                    {"text": f"üìä –°–ø—Ä–µ–¥: {settings.get_spread_display()}", "callback_data": "settings_spread"}
                ],
                [
                    {"text": f"üî¢ –°–∏–≥–Ω–∞–ª–æ–≤: {settings.max_signals}", "callback_data": "settings_signals"},
                    {"text": f"üìà –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {settings.get_selected_count()}/10", "callback_data": "settings_instruments"}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}
                ]
            ]
        }
        return keyboard
    
    def get_interval_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        keyboard_rows = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        intervals = list(UserSettings.AVAILABLE_INTERVALS.items())
        for i in range(0, len(intervals), 2):
            row = []
            for j in range(2):
                if i + j < len(intervals):
                    interval, display = intervals[i + j]
                    row.append({"text": display, "callback_data": f"interval_{interval}"})
            keyboard_rows.append(row)
        
        keyboard_rows.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}])
        
        return {"inline_keyboard": keyboard_rows}
    
    def get_spread_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞ —Å–ø—Ä–µ–¥–∞"""
        keyboard_rows = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        spreads = list(UserSettings.AVAILABLE_SPREADS.items())
        for i in range(0, len(spreads), 3):
            row = []
            for j in range(3):
                if i + j < len(spreads):
                    spread, display = spreads[i + j]
                    row.append({"text": display, "callback_data": f"spread_{spread}"})
            keyboard_rows.append(row)
        
        keyboard_rows.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}])
        
        return {"inline_keyboard": keyboard_rows}
    
    def get_signals_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return {
            "inline_keyboard": [
                [
                    {"text": "1 —Å–∏–≥–Ω–∞–ª", "callback_data": "signals_1"},
                    {"text": "2 —Å–∏–≥–Ω–∞–ª–∞", "callback_data": "signals_2"},
                    {"text": "3 —Å–∏–≥–Ω–∞–ª–∞", "callback_data": "signals_3"}
                ],
                [
                    {"text": "4 —Å–∏–≥–Ω–∞–ª–∞", "callback_data": "signals_4"},
                    {"text": "5 —Å–∏–≥–Ω–∞–ª–æ–≤", "callback_data": "signals_5"},
                    {"text": "10 —Å–∏–≥–Ω–∞–ª–æ–≤", "callback_data": "signals_10"}
                ],
                [
                    {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}
                ]
            ]
        }
    
    def get_settings_summary(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        
        summary = f"""‚öôÔ∏è –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {settings.get_interval_display()}
üìä –ü–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞: {settings.get_spread_display()}
üî¢ –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤: {settings.max_signals} –∑–∞ —Ä–∞–∑
üìà –í—ã–±—Ä–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {settings.get_selected_count()}/10

"""
        
        if settings.is_fast_monitoring():
            summary += "üîÑ –ë—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤–∫–ª—é—á–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n\n"
        else:
            summary += "üêå –û–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –±–µ–∑ —Ä–æ—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
            
        summary += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:"
        
        return summary
    
    def add_user_instrument(self, user_id: int, instrument_key: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        return settings.add_instrument(instrument_key)
    
    def remove_user_instrument(self, user_id: int, instrument_key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        return settings.remove_instrument(instrument_key)
    
    def get_user_instruments_dict(self, user_id: int, all_instruments: Dict[str, str]) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        return settings.get_selected_instruments_dict(all_instruments)
    
    def get_instruments_keyboard(self, user_id: int, all_instruments: Dict[str, str], page: int = 0) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        settings = self.get_user_settings(user_id)
        keyboard_rows = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
        sectors = self._group_instruments_by_sectors(all_instruments)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞
        if page == 0:
            for sector_name, instruments in sectors.items():
                selected_count = sum(1 for stock in instruments.keys() if stock in settings.selected_instruments)
                total_count = len(instruments)
                
                keyboard_rows.append([{
                    "text": f"üìä {sector_name} ({selected_count}/{total_count})", 
                    "callback_data": f"sector_{sector_name.replace(' ', '_').replace('üîµ', 'blue').replace('üè¶', 'banks').replace('‚õΩ', 'oil').replace('üè≠', 'metals').replace('‚ö°', 'energy').replace('üì°', 'telecom').replace('üíª', 'tech').replace('üõí', 'retail').replace('üèòÔ∏è', 'realty').replace('üöõ', 'transport').replace('üß™', 'chem').replace('üîß', 'industry').replace('üí∞', 'finance').replace('üÜï', 'new')}"
                }])
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard_rows.append([
                {"text": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä", "callback_data": "instruments_clear"},
                {"text": "üéØ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "callback_data": "instruments_default"}
            ])
            keyboard_rows.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "settings_back"}])
        
        return {"inline_keyboard": keyboard_rows}
    
    def get_sector_instruments_keyboard(self, user_id: int, sector_name: str, all_instruments: Dict[str, str]) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ"""
        settings = self.get_user_settings(user_id)
        keyboard_rows = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–µ–∫—Ç–æ—Ä–∞
        sectors = self._group_instruments_by_sectors(all_instruments)
        sector_instruments = sectors.get(sector_name, {})
        
        # –ü–æ 1 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        for stock, futures in sector_instruments.items():
            is_selected = stock in settings.selected_instruments
            emoji = "‚úÖ" if is_selected else "‚≠ï"
            action = "remove" if is_selected else "add"
            
            keyboard_rows.append([{
                "text": f"{emoji} {stock} ‚Üí {futures}", 
                "callback_data": f"instrument_{action}_{stock}"
            }])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_rows.append([
            {"text": "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", "callback_data": f"sector_select_all_{hash(sector_name) % 1000}"},
            {"text": "‚ùå –°–Ω—è—Ç—å –≤—Å–µ", "callback_data": f"sector_clear_all_{hash(sector_name) % 1000}"}
        ])
        keyboard_rows.append([{"text": "üîô –ö —Å–µ–∫—Ç–æ—Ä–∞–º", "callback_data": "instruments_back_to_sectors"}])
        
        return {"inline_keyboard": keyboard_rows}
    
    def _group_instruments_by_sectors(self, all_instruments: Dict[str, str]) -> Dict[str, Dict[str, str]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        sectors = {
            "üîµ –ì–æ–ª—É–±—ã–µ —Ñ–∏—à–∫–∏": {},
            "üè¶ –ë–∞–Ω–∫–∏": {},
            "‚õΩ –ù–µ—Ñ—Ç—å –∏ –≥–∞–∑": {},
            "üè≠ –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è": {},
            "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": {},
            "üì° –¢–µ–ª–µ–∫–æ–º": {},
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {},
            "üõí –†–∏—Ç–µ–π–ª": {},
            "üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": {},
            "üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": {},
            "üß™ –•–∏–º–∏—è": {},
            "üîß –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å": {},
            "üí∞ –§–∏–Ω—É—Å–ª—É–≥–∏": {},
            "üÜï –ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã": {}
        }
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º

        blue_chips = ["SBER", "GAZP", "GMKN", "FEES", "VTBR", "LKOH", "ROSN", "TATN", "ALRS"]
        banks = ["SBERP", "CBOM", "BSPB", "SVCB", "VTBR"]
        oil_gas = ["GAZP", "LKOH", "ROSN", "TATN", "TATP", "SNGS", "SNGSP", "NVTK", "SIBN", "BANE", "RNFT"]
        metals = ["GMKN", "ALRS", "NLMK", "MAGN", "CHMF", "MTLR", "PLZL", "POLY", "RUAL", "PHOR", "RASP"]
        energy = ["FEES", "IRAO", "HYDR", "RSTI", "MSNG", "TRNFP"]
        telecom = ["RTKM", "MTSS", "TCSI"]
        tech = ["YDEX", "VKCO", "OZON", "TCSG"]
        retail = ["MGNT", "FIVE", "DIXY", "LENTA", "MVID"]
        real_estate = ["PIKK", "SMLT", "LSRG", "ETALON"]
        transport = ["AFLT", "FESH", "FLOT", "KMAZ"]
        chemical = ["AKRN", "NKNC", "URKZ"]
        industrial = ["SGZH", "LEAS", "BELUGA", "KMAZ", "LIFE"]
        finance = ["MOEX", "SPBE", "SFIN"]
        international = ["SPY", "QQQ", "DAX", "HANG", "NIKKEI", "EURO50", "RUSSELL", "MSCI_EM"]
        currency = ["USDRUB", "EURRUB", "CNYRUB", "TRYRUB", "HKDRUB"]
        commodities = ["GOLD_RUB", "SILVER_RUB", "BRENT", "NATGAS", "WHEAT", "SUGAR"]
        indices = ["MOEX_IDX", "RTS_IDX", "MOEX_MINI", "RTS_MINI"]
        new_assets = ["AFKS", "AQUA", "VSMO", "KOGK", "UPRO", "ISKJ", "POSI", "ASTR", "SOFL", "WUSH", "DIAS"]
        
        for stock, futures in all_instruments.items():
            if stock in blue_chips:
                sectors["üîµ –ì–æ–ª—É–±—ã–µ —Ñ–∏—à–∫–∏"][stock] = futures
            elif stock in banks:
                sectors["üè¶ –ë–∞–Ω–∫–∏"][stock] = futures
            elif stock in oil_gas:
                sectors["‚õΩ –ù–µ—Ñ—Ç—å –∏ –≥–∞–∑"][stock] = futures
            elif stock in metals:
                sectors["üè≠ –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è"][stock] = futures
            elif stock in energy:
                sectors["‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"][stock] = futures
            elif stock in telecom:
                sectors["üì° –¢–µ–ª–µ–∫–æ–º"][stock] = futures
            elif stock in tech:
                sectors["üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"][stock] = futures
            elif stock in retail:
                sectors["üõí –†–∏—Ç–µ–π–ª"][stock] = futures
            elif stock in real_estate:
                sectors["üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"][stock] = futures
            elif stock in transport:
                sectors["üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"][stock] = futures
            elif stock in chemical:
                sectors["üß™ –•–∏–º–∏—è"][stock] = futures
            elif stock in industrial:
                sectors["üîß –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"][stock] = futures
            elif stock in finance:
                sectors["üí∞ –§–∏–Ω—É—Å–ª—É–≥–∏"][stock] = futures
            elif stock in international:
                sectors["üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ ETF"][stock] = futures
            elif stock in currency:
                sectors["üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã"][stock] = futures
            elif stock in commodities:
                sectors["ü•á –¢–æ–≤–∞—Ä—ã"][stock] = futures
            elif stock in indices:
                sectors["üìà –ò–Ω–¥–µ–∫—Å—ã"][stock] = futures
            elif stock in new_assets:
                sectors["üÜï –ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã"][stock] = futures
            else:
                sectors["üîß –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"][stock] = futures  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–∫—Ç–æ—Ä—ã
        return {name: instruments for name, instruments in sectors.items() if instruments}
    
    def get_sector_name_by_hash(self, sector_hash: int, all_instruments: Dict[str, str]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ —Ö–µ—à—É"""
        sectors = self._group_instruments_by_sectors(all_instruments)
        for sector_name in sectors.keys():
            if hash(sector_name) % 1000 == sector_hash:
                return sector_name
        return "üîß –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def clear_user_instruments(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings = self.get_user_settings(user_id)
        settings.selected_instruments = []
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    def set_default_instruments(self, user_id: int, all_instruments: Dict[str, str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤—ã–µ 5)"""
        settings = self.get_user_settings(user_id)
        default_instruments = list(all_instruments.keys())[:5]
        settings.selected_instruments = default_instruments
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_instruments}")